#light

module Util : PolicyTypes
open Prin
open DataModel
open PolicyTypes
open ExternDB

type In :: attribute => authstate => P
assume forall (a:attribute) (tl:authstate). In a (ACons a tl)
assume forall (a:attribute) (b:attribute) (tl:authstate). In a tl => In a (ACons b tl)
assume forall (a:attribute). (not (In a ANil))
assume forall (a:attribute) (b:attribute) (tl:authstate). ((not (In a tl)) && (not (a=b)) => (not (In a (ACons b tl))))

type ContainsAnnot :: annots => annot => P
assume forall (a:annotation) (tl:annots).  ContainsAnnot (AnnotCons a tl) a.annot
assume forall (a:annotation) (b:annot) (tl:annots). ContainsAnnot tl b => ContainsAnnot (AnnotCons a tl) b
assume forall (a:annot). (not (ContainsAnnot AnnotNil a))
assume forall (a:annotation) (c:annot) (tl:annots). 
  ((not (ContainsAnnot tl c)) && (not (a.annot=c)) => (not (ContainsAnnot (AnnotCons a tl) c)))
 
type extendedstate (s:authstate) (a:attribute) = (x:authstate { (forall (b:attribute). (In a x) && ((not (In b s)) || (In b x)))})
type subtractedstate (s:authstate) (a:attribute) = (x:authstate { (not (In a x)) && (forall (b:attribute). (In b s => (In b x) || (a=b)))})
type authcontains (a:attribute) = (x:authstate { In a x})

(* Why is this not automatically added by ProofLib? *)
assume forall (p:prin) (q:prin). ((not (p=q)) => (not ((WithholdFrom p) = (WithholdFrom q))))


val add_attribute: s:authstate -> a:attribute -> StateIs s -> (s':extendedstate s a * StateIs s')
let add_attribute s a tok =
  let _ = ins_attribute a in
  let s' = ACons a s in
    s', Sign s'

val remove_attribute: a:attribute -> s:authstate -> subtractedstate s a
let rec remove_attribute a s = match s with 
  | ANil -> ANil
  | ACons x tl -> 
      if x = a then remove_attribute a tl
      else ACons x (remove_attribute a tl)

val delete_attribute: s:authstate -> a:(a:attribute { In a s}) -> StateIs s -> (s':subtractedstate s a * StateIs s')
let delete_attribute s a tok =
  let _ = del_attribute a in
  let s' = remove_attribute a s in
    s', Sign s'

(* A utility functions that represent authorization checks; Can these be synthesized? *)
val checkIn: a:attribute -> s:authstate -> b:bool { (b=true => In a s) && (b=false => (not (In a s)))}
let rec checkIn a = function
  | ANil -> false
  | ACons b tl -> if a=b then true else checkIn a tl

val containsAnnot: a:annots -> b:annot -> z:bool { (z=true => ContainsAnnot a b) && (z=false => (not (ContainsAnnot a b)))}
let rec containsAnnot a b = match a with 
  | AnnotNil -> false
  | AnnotCons aa tl -> if b=aa.annot then true else containsAnnot tl b

val get_authorization_state : unit -> (s:authstate * StateIs s)
let get_authorization_state x = 
  let s = read_authstate () in
    (s, Sign s)

val persist_state: (s:authstate * StateIs s) -> unit
let persist_state x = ()
