#light

module HealthMgr
open Prin
open DataModel
open PolicyTypes
open Policy
open Messages
open Util
open HealthDB
open Log

val deny: response 
let deny = (Denied "Sorry, insufficient privilege") 

val internal_handle_req: p:prin -> cred p -> request -> state -> (response * state)
let rec internal_handle_req p cred req st = match req with 
  | GetPatientRecords kw ->
      let s, tok = st in
      let test = ((checkIn (ActiveRole p Doctor) s) ||
                  (checkIn (ActiveRole p Nurse) s) ||
                  (checkIn (ActiveRole p InsuranceProvider) s)) in
        if test then 
          let records, tok' = search_by_kw p cred kw s tok in
          let records = log_proofs_precs p s records in
          let response = (RecordList records) in
            response, (s, tok')
        else 
          deny, (s, tok)

  | UpdateRecord r con aopt -> 
      let s,tok = st in
        if check_editable p s r then 
          let tok = edit_record p cred r con s tok in
            match aopt with 
              | None -> Ok, (s,tok)
              | Some annot -> 
                  if annot=WithholdFrom p then Ok, (s,tok)
                  else 
                    let tok = annotate_record p cred r annot s tok in 
                      Ok, (s,tok)
        else
          deny, (s,tok)

  | AnnotateRecord r annot -> 
      let s,tok = st in
        if check_annotable p s r annot then 
          let tok = annotate_record p cred r annot s tok in
            Ok, (s,tok)
        else
          deny, (s,tok)

  | NewRecord(pat, contents) -> 
      let s,tok = st in
        if ((checkIn (ActiveRole p Doctor) s) &&
              (checkIn (IsTreating p pat) s)) then 
          let rec_opt, tok = new_record p cred pat contents s tok in
            match rec_opt with 
              | Some r -> OneRecord r, (s, tok)
              | None -> Failed, (s,tok)
        else
          deny, (s,tok)

  | SearchQuery kw_opt _ pat -> 
      let s, tok = st in
      let test = ((checkIn (ActiveRole p Doctor) s) ||
                  (checkIn (ActiveRole p Nurse) s) ||
                  (checkIn (ActiveRole p InsuranceProvider) s)) in
        if test then 
          match kw_opt, pat with
            | Some kw, None -> 
                let recs, tok = search_by_kw p cred kw s tok in
                let recs = log_proofs_precs p s recs in
                  RecordList recs, (s, tok)
            | Some kw, Some pat -> 
                let recs, tok = search_by_kw_patient p cred kw (U pat) s tok in
                let recs = log_proofs_precs p s recs in
                  RecordList recs, (s, tok)
            | None, Some pat -> 
                let recs, tok = search_by_kw_patient p cred "" (U pat) s tok in
                let recs = log_proofs_precs p s recs in
                  RecordList recs, (s, tok)
            | None, None -> 
                internal_handle_req p cred GetReadableRecords (s,tok)
        else
          deny, (s, tok)
            
  | GetRecordById id -> 
      let s,tok = st in
      let rec_opt, tok = get_record_by_id p cred id s tok in
      let resp = match rec_opt with
        | Some r -> OneRecord r 
        | _ -> RecordList Nil in
        resp, (s,tok)

  | GetReadableRecords -> 
      let s, tok = st in
      let precs, tok = get_readable_docs p cred s tok in 
      let recs = log_proofs_precs p s precs in
        (RecordList recs), (s, tok)

  | GetRecordContents r ->
      let s, tok = st in
        if check_readable p s r then
          let d, con, tok' = read_contents p cred r s tok in
          let editable = check_editable p s r in 
          let response = (RecordContents d con editable) in
            response, (s, tok')
        else
          deny, (s, tok)
            
  | ActivateRole r ->
      let s, tok = st in
        if checkIn (ActiveRole p r) s then 
          Ok, (s,tok)
        else
          let test = checkIn (CanBeInRole p r) s in
            if test then
              let s', tok' = activate_role p cred r s tok in
                Ok, (s', tok')
            else
              deny, (s, tok)

  | ConsentToTreatment doc ->
      let s, tok = st in
      let test = (checkIn (ActiveRole p Patient) s) && (checkIn (CanBeInRole doc Doctor) s) in
        if test then
          let s', tok' = consent_to_treatment p cred doc s tok in
            Ok, (s', tok')
        else
          deny, (s, tok)

  | GetActiveRole -> 
      let s, tok = st in
      let ar_opt = get_active_role p cred s in 
        (match ar_opt with 
           | Some r -> CurrentRole (Some r), (s, tok)
           | None -> CurrentRole None, (s, tok))
              
  | GetValidRoles -> 
      let s, tok = st in
      let vrs = get_valid_roles p cred s in
      let vrs = log_proofs_roles p s vrs in
        ValidRoles vrs, (s,tok)

  | GetPatients -> 
      let s,tok = st in
        if checkIn (ActiveRole p Doctor) s then
          let pl,tok = get_patients p cred s tok in
            PrinList (log_proofs_prin p s pl), (s,tok)
        else deny, (s,tok)

  | GetAuthors -> 
      PrinList Nil, st

  | RemoveAnnotation a ->
      let s,tok = st in
        if (p=a.annot_author) then
          let tok' = remove_annotation p cred a s tok in
            Ok, (s, tok')
        else
          deny, (s,tok)
            
val handle_req: credential -> request -> response 
let handle_req c req = 
  let (p,cred) = open_credential c in
  let st = get_authorization_state () in
  let response, st' = internal_handle_req p cred req st in
  let _ = persist_state st' in
    response
