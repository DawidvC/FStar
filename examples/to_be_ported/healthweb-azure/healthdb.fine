#light

module HealthDB : DataModel
open Prin
open DataModel
open PolicyTypes
open ExternDB
open Util
open Policy

(*******************************************************************************)
(* Public API to database *)
(*******************************************************************************)

  val check_readable: p:prin -> s:authstate -> r:record -> (b:bool { b=true => GrantedIn (Permit p (Read r.recid)) s})
  let check_readable p s r = 
    if p=r.author then true
    else if p = r.patient then
      (checkIn (ActiveRole p Patient) s  &&
         (not (containsAnnot r.annotations (WithholdFrom p))))
    else 
      ((checkIn (ActiveRole p Doctor) s) &&
         (checkIn (IsTreating p r.patient) s) &&
         (not (containsAnnot r.annotations (WithholdFrom p))))

  val check_editable: p:prin -> s:authstate -> r:record -> (b:bool { b=true => GrantedIn (Permit p (Edit r.recid)) s})
  let check_editable p s r = p=r.author
    
  val check_annotable: p:prin -> s:authstate -> r:record -> a:annot -> 
                      (b:bool { b=true => GrantedIn (Permit p (Annotate r.recid a)) s})
  let check_annotable p s r a = 
    match a with 
      | WithholdFrom q ->
          if p=q then false
          else check_editable p s r
      | Remark _ -> checkIn (IsTreating p r.patient) s || (p=r.patient)
    
  val edit_record: p:prin -> cred p -> r:record -> content:string -> 
                   s:permit p (Edit (r.recid)) -> StateIs s -> StateIs s
  let edit_record p c r content s tok = 
    let _  = update_record r content in
      tok

  val new_record: p:prin -> cred p -> pat:prin -> content:string -> 
                  s:permit p (CreateRecordAbout pat) -> StateIs s -> 
                  (option record * StateIs s)
  let new_record p c pat content s tok = 
    let rid = create_record p pat content in
    let rec_opt = find_record_by_id rid in
      rec_opt, tok
        
  val filter_readable: p:prin -> s:authstate -> list record -> list (precord p s)
  let rec filter_readable p s l = match l with 
    | Nil -> Nil
    | Cons r tl ->
        let _ = print_string "Checking if record is readable" in
        let _ = print_record r in
        if check_readable p s r then 
          let _ = print_string "Yes, readable" in
            Cons r (filter_readable p s tl)
        else 
          let _ = print_string "Not readable" in
            filter_readable p s tl

  val filter_pat_readable: p:prin -> s:authstate -> q:prin -> 
                          list record ->
                          list (precord p s)
  let rec filter_pat_readable p s q l = match l with 
    | Nil -> Nil
    | Cons r tl ->
        let _ = print_string "Checking if record is readable" in
        let _ = print_record r in
        if check_readable p s r && q=r.patient then 
          let _ = print_string "Yes, readable" in
            Cons r (filter_pat_readable p s q tl)
        else 
          let _ = print_string "Not readable" in
            filter_pat_readable p s q tl

  val search_by_kw: p:prin -> cred p -> kw:string ->
                    s:permit p Search -> StateIs s -> 
                    (list (precord p s) * StateIs s)
  let search_by_kw p c kw s tok =
    let recs = find_records_by_keyword kw in
    let recs = filter_readable p s recs in
      recs, tok
        
  val search_by_kw_patient: p:prin -> cred p -> kw:string -> pat:prin ->
                             s:permit p Search -> StateIs s ->
                            (list (precord p s) * StateIs s)
  let search_by_kw_patient p c kw pat s tok = 
    let recs = find_records_by_keyword_pat kw pat in
    let recs = filter_pat_readable p s pat recs in
      recs, tok

  (* nested refinements would be nice: r:precord<p,s> { r.recid=rid} *)
  val get_record_by_id: p:prin -> cred p -> rid:int -> 
                        s:authstate -> StateIs s -> 
                       (option (r:record { r.recid=rid && (GrantedIn (Permit p (Read r.recid)) s)}) * StateIs s)
  let get_record_by_id p c id s tok = 
    let rec_opt = find_record_by_id id in
      match rec_opt with 
        | None -> None, tok
        | Some r -> 
            if check_readable p s r && id=r.recid then Some r, tok 
            else None, tok
        
  val read_contents: p:prin -> cred p -> r:record -> 
                     s:permit p (Read r.recid) -> StateIs s -> 
                     (string * string * StateIs s)
  let read_contents p c r s tok =
    match r.private_contents with
        Contents d c -> d, c, tok

  val get_readable_docs: p:prin -> cred p -> s:authstate -> StateIs s -> 
                        (list (precord p s) * StateIs s)
  let get_readable_docs p c s tok = 
    let recs = 
      if checkIn (ActiveRole p Patient) s then find_patient_records p 
      else find_authored_records p in
    let _ = print_string "Got back records from DB:" in
    let _ = print_records recs in
    let recs = filter_readable p s recs in
      recs, tok

  (* notice that s is purely specificational here; would be nice to erase it *)
  val gvr_helper: p:prin -> 
                  s:authstate -> 
                  (s':authstate { (forall (x:attribute). In x s' => In x s)}) -> 
                  list (r:role { In (CanBeInRole p r) s})
  let rec gvr_helper p s s' = match s' with
    | ANil -> Nil
    | ACons a tl -> 
        match a with
          | CanBeInRole q r when p=q -> Cons r (gvr_helper p s tl)
          | _ -> gvr_helper p s tl

  val get_valid_roles: p:prin -> cred p -> s:authstate -> 
                       list (r:role { In (CanBeInRole p r) s})
  let get_valid_roles p c s = gvr_helper p s s 
    
  val get_active_role: p:prin -> cred p -> s:authstate -> 
                       option (r:role { In (ActiveRole p r) s})
  let rec get_active_role p c s = match s with 
    | ANil -> None
    | ACons (ActiveRole q r) tl when p=q -> Some r
    | ACons _ tl -> 
        (match get_active_role p c tl with 
           | None -> None
           | Some r -> Some r)

  val gpl_helper: p:prin -> s:(s:authstate { In (ActiveRole p Doctor) s}) -> 
                  (s':authstate { (forall (x:attribute). In x s' => In x s)}) -> 
                  list (q:prin { GrantedIn (Permit p (ViewPatient q)) s})
  let rec gpl_helper p s s' = match s' with
    | ANil -> Nil
    | ACons (IsTreating p' pat) tl when p'=p -> 
        Cons pat (gpl_helper p s tl)
    | ACons _ tl -> gpl_helper p s tl

  val get_patients: p:prin -> cred p -> 
                    s:(s:authstate { In (ActiveRole p Doctor) s}) -> StateIs s ->
                    (list (q:prin { GrantedIn (Permit p (ViewPatient q)) s}) * StateIs s)
  let get_patients p c s tok = gpl_helper p s s, tok
          
  val annotate_record: p:prin -> cred p -> r:record -> a:annot ->
                       s:permit p (Annotate r.recid a) -> StateIs s -> StateIs s
  let annotate_record p c r a s tok =
    let _ = add_annotation p r a in
      tok

  val remove_annotation:p:prin -> cred p -> a:annotation ->
                        s:permit p (DeleteAnnotation a) -> StateIs s -> StateIs s
  let remove_annotation p c a s tok =
    let _ = delete_annotation a in
      tok

  val activate_role: p:prin -> cred p -> r:role ->
                     s:permit p (Activate r) -> StateIs s ->
                     (t:extendedstate s (ActiveRole p r) * StateIs t)
  let activate_role p c r s tok =
    add_attribute s (ActiveRole p r) tok 

  val deactivate_role: p:prin -> cred p -> r:role ->
                       s:permit p (Deactivate r) -> StateIs s ->
                      (t:subtractedstate s (ActiveRole p r) * StateIs t)
  let deactivate_role p c r s tok = 
    delete_attribute s (ActiveRole p r) tok
    
  val consent_to_treatment: pat:prin -> cred pat -> doc:prin ->
                            s:permit pat (ConsentTo doc) -> StateIs s ->
                            (t:extendedstate s (IsTreating doc pat) * StateIs t)
  let consent_to_treatment pat c doc s tok =
    add_attribute s (IsTreating doc pat) tok 

  val deactivate_all_roles: p:prin -> cred p -> s:authstate -> StateIs s -> 
                            (s':(s':authstate { forall (r:role). not (In (ActiveRole p r) s')}) * StateIs s')
