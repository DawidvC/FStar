#light

module Policy
open Prin
open DataModel
open PolicyTypes
open Util

assume authorCanRead: forall (p:prin) (r:record) (s:authstate).
  (p=r.author) => 
  GrantedIn (Permit p (Read r.recid)) s

assume authorCanEdit: forall (p:prin) (r:record) (s:authstate).
  (p=r.author) => 
  GrantedIn (Permit p (Edit r.recid)) s

assume editorCanAnnotate: forall (p:prin) (r:record) (a:annot) (s:authstate). 
  (GrantedIn (Permit p (Edit r.recid)) s &&
     (not (a=(WithholdFrom p))))=> 
  (GrantedIn (Permit p (Annotate r.recid a)) s)

assume doctorCanRemark: forall (doc:prin) (r:record) (pat:prin) (rem:string) (s:authstate). 
  (r.patient=pat && In (IsTreating doc pat) s) =>
  (GrantedIn (Permit doc (Annotate r.recid (Remark rem))) s)

assume patientCanRemark: forall (r:record) (pat:prin) (rem:string) (s:authstate). 
  (r.patient=pat) => 
  (GrantedIn (Permit pat (Annotate r.recid (Remark rem))) s)

assume annotAuthorCanDelete: forall (p:prin) (a:annotation) (s:authstate).
  (a.annot_author = p) =>
  (GrantedIn (Permit p (DeleteAnnotation a)) s)

assume docCanCreate: forall (p:prin) (pat:prin) (s:authstate). 
  (In (ActiveRole p Doctor) s &&
   In (IsTreating p pat) s) =>
  GrantedIn (Permit p (CreateRecordAbout pat)) s

assume patCanReadUnlessWithheld: forall (p:prin) (r:record) (s:authstate).
  (p=r.patient && 
      In (ActiveRole p Patient) s &&
      (not (ContainsAnnot r.annotations (WithholdFrom p)))) =>
  GrantedIn (Permit p (Read r.recid)) s
  
assume docCanReadUnlessWithheld: forall (p:prin) (r:record) (s:authstate).
  (In (ActiveRole p Doctor) s &&
   In (IsTreating p r.patient) s &&
   (not (ContainsAnnot r.annotations (WithholdFrom p)))) =>
  GrantedIn (Permit p (Read r.recid)) s

assume psychCanRead: forall (p:prin) (r:record) (s:authstate).
  (In (ActiveRole p Psychiatrist) s &&
   In (IsTreating p r.patient) s &&
      (r.subject = Psychiatric) &&
   (not (ContainsAnnot r.annotations (WithholdFrom p)))) =>
  GrantedIn (Permit p (Read r.recid)) s

assume patCanConsent: forall (pat:prin) (doc:prin) (s:authstate).
  (In (ActiveRole pat Patient) s && 
   In (CanBeInRole doc Doctor) s) => 
  GrantedIn (Permit pat (ConsentTo doc)) s

assume pCanActivate: forall (p:prin) (r:role) (s:authstate).
  (In (CanBeInRole p r) s) =>
  GrantedIn (Permit p (Activate r)) s

assume pCanDeactivate: forall (p:prin) (r:role) (s:authstate).
  (In (ActiveRole p r) s) => 
  GrantedIn (Permit p (Deactivate r)) s

assume pCanDeactivateRev: forall (p:prin) (r:role) (s:authstate).
  GrantedIn (Permit p (Deactivate r)) s =>
  (In (ActiveRole p r) s) 

assume pCanSearchByKW: forall (p:prin) (s:authstate).
  (In (ActiveRole p Doctor) s ||
   In (ActiveRole p Nurse) s ||
   In (ActiveRole p InsuranceProvider) s) =>
  GrantedIn (Permit p Search) s

assume pCanViewPatients: forall (p:prin) (q:prin) (s:authstate). 
  (In (ActiveRole p Doctor) s &&
   In (IsTreating p q) s) => 
  GrantedIn (Permit p (ViewPatient q)) s
 
