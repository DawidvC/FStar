(*
   Copyright 2008-2014 Nikhil Swamy and Microsoft Research

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*)
module Principals
(* Copyright (c) Microsoft Corporation.  All rights reserved.  *)
open Data 
open Crypto

type prin = str
type usage = bytes
type prinpub = strpub
predicate type preds = 
(* dynamically assumed *)
  | PublicKeyPair of usage * prin * key * key
  | SharedKeyPair of usage * prin * prin * key * key (* internal *)
  | EncryptionKey of usage * prin * prin * key
  | MACKey of usage * prin * prin * key
  | Password of usage * prin * prin * str
  | SecretNonce of prin * prin * bytes
  | Bad of prin                                       

(* abbreviations *)
  | PrivateKey of usage * prin * key
  | PublicKey of usage * prin * key

(* user-defined *)
  | SendFrom of usage * prin * bytes
  | EncryptTo of usage * prin * bytes
  | Send of usage * prin * prin * bytes
  | Encrypt of usage * prin * prin * bytes


(* We define a null value that will never be signed, MACed or encrypted *)
val null:bytes 

(* Two-party secrets *)

theorem !a,b,n. SecretNonce(a,b,n) => Nonce(n)
assume !a,b,n. SecretNonce(a,b,n) => (PubNonce(n) <=> (Bad(a) \/ Bad(b)))

val mkSecretNonce: a:prin -> b:prin -> n:bytes{SecretNonce(a,b,n)}


                          (* PUBLIC KEYS *)

(* abbreviations *)
definition//Name=(PublicKey)
  !u,x,pk. PublicKey(u,x,pk) <=> (?sk. PublicKeyPair(u,x,pk,sk))

definition//Name=(PrivateKey)
  !u,x,sk. PrivateKey(u,x,sk) <=> (?pk. PublicKeyPair(u,x,pk,sk))

// define usage of keypairs

(*--- PublicKeyDefBegin *)
assume//Name=(SignSays SendFrom)
  !u,x,pk,sk,m. PublicKeyPair(u,x,pk,sk) /\ 
  SendFrom(u,x,m) => SignSays(sk,m)
assume//Name=(SignSays Bad)
  !u,x,pk,sk,m. PublicKeyPair(u,x,pk,sk) /\ Bad(x) => SignSays(sk,m)
assume//Name=(CanAsymEncrypt EncryptTo)
  !u,x,pk,sk,m. PublicKeyPair(u,x,pk,sk) /\ 
  EncryptTo(u,x,m) /\ (Bad(x) => Pub(m)) => CanAsymEncrypt(pk,m) 
assume//Name=(CanAsymEncrypt Bad)
  !u,x,pk,sk,m. PublicKeyPair(u,x,pk,sk) /\ 
  Bad(x) /\ Pub(m) =>  CanAsymEncrypt(pk,m) 
(*--- PublicKeyDefEnd *)

// an equivalent formulation is
private ask !u,x,pk,sk,m. PublicKeyPair(u,x,pk,sk) => (
  ((SendFrom(u,x,m)) \/ Bad(x) => SignSays(sk,m)) /\
  (((EncryptTo(u,x,m) /\ (Bad(x) => Pub(m))) \/ (Bad(x) /\ Pub(m))) =>  CanAsymEncrypt(pk,m)))

// the proof of the three inversion theorems relies on 
// protocol code not defining SignSays and CanAsymEncrypt

(*--- PublicKeyThmBegin *)
theorem//Name=(PublicKeyPair PubPrivKeyPair)
  !u,x,pk,sk. PublicKeyPair(u,x,pk,sk) => Crypto.PubPrivKeyPair(pk,sk) 
theorem//Name=(Inv PublicKeyPair SignSays)
  !u,x,pk,sk,m. PublicKeyPair(u,x,pk,sk) /\ 
  SignSays(sk,m) => ((SendFrom(u,x,m)) \/ Bad(x))
theorem//Name=(Inv PublicKeyPair CanAsymEncrypt 1)
  !u,x,pk,sk,m. PublicKeyPair(u,x,pk,sk) /\ 
  CanAsymEncrypt(pk,m) => ((EncryptTo(u,x,m)) \/ Bad(x))
theorem//Name=(Inv PublicKeyPair CanAsymEncrypt 2)
  !u,x,pk,sk,m. PublicKeyPair(u,x,pk,sk) /\ 
  CanAsymEncrypt(pk,m) /\ Bad(x) => Pub(m)
conjecture//Name=(PrivKey Secrecy)
  !u,a,sk. PrivateKey(u,a,sk) /\ Pub_k(sk) => 
  (Bad(a) \/ ((!v. SendFrom(u,a,v)) /\ (!v. EncryptTo(u,a,v) => Pub(v))))
(*--- PublicKeyThmEnd *)
// an earlier version, proved in coq using some event parameter:
// theorem//Name=(PrivateKey PrivCompKey)
// !u,x,sk. PrivateKey(u,x,sk) /\ PrivCompKey(sk) => Bad(x)


private val pkeydb: (usage * prin, 
  (u:usage * a:prin * pk:key * sk:key){PublicKeyPair(u,a,pk,sk)}) Db.t

(*--- PublicKeyAPIBegin *)
private val mkPublicKeyPair: u:usage -> a:prin -> 
  (pk:key * sk:key){PublicKeyPair(u,a,pk,sk)}
val genPublicKeyPair: u:usage -> a:prin -> unit
private val getPublicKeyPair: u:usage -> a:prin -> 
  (pk:key * sk:key){PublicKeyPair(u,a,pk,sk)}
private val getPrivateKey: u:usage -> a:prin -> 
  sk:key{?pk. PublicKeyPair(u,a,pk,sk)}
val getPublicKey: u:usage -> a:prin -> 
  pk:key{?sk. PublicKeyPair(u,a,pk,sk)}
val leakPrivateKey: u:usage -> a:prin ->   
  sk:keypub{Bad(a) /\ (?pk. PublicKeyPair(u,a,pk,sk))}
(*--- PublicKeyAPIEnd *)

private val rsa_encrypt: u:usage -> a:prin -> 
  k:key{PublicKey(u,a,k)} ->
  p:bytes{EncryptTo(u,a,p) /\ (Bad(a) => Pub(p))} ->
  c:bytes{IsAsymEncryption(c,k,p)}

private val rsa_decrypt: u:usage -> a:prin ->
  k:key{PrivateKey(u,a,k)} -> 
  c:bytes ->
  p:bytes{(!pk,x. PublicKeyPair(u,a,pk,k) /\ 
                  IsAsymEncryption(c,pk,x) => 
		(EncryptTo(u,a,p) \/ Bad(a) \/ Pub(p))) /\  
		(Pub(c) /\ Bad(a) => Pub(p))}

private val rsa_encrypt_oaep: u:usage -> a:prin -> 
	k:key{PublicKey(u,a,k)} ->
	p:bytes{EncryptTo(u,a,p) /\ (Bad(a) => Pub(p))} ->
	c:bytes{IsAsymEncryption(c,k,p) /\ Pub(c)}

private val rsa_decrypt_oaep: u:usage -> a:prin ->
	k:key{PrivateKey(u,a,k)} -> 
	c:bytes ->
	p:bytes{(?pk. PublicKeyPair(u,a,pk,k) /\ IsAsymEncryption(c,pk,p)) /\
	        (EncryptTo(u,a,p) \/ Bad(a) \/ Pub(p)) /\  
                (Pub(c) /\ Bad(a) => Pub(p))}

val rsa_sign: u:usage -> a:prin ->
  sk:key{PrivateKey(u,a,sk)} -> 
  p:bytes{SendFrom(u,a,p)} ->
  s:bytes{IsSignature(s,sk,p) /\ (Pub(p) => Pub(s))}

val rsa_verify: u:usage -> a:prin -> 
  vk:key{PublicKey(u,a,vk)} -> 
  w:bytes -> s:bytes -> 
  unit {!sk. PublicKeyPair(u,a,vk,sk) => 
             (SendFrom(u,a,w) \/ Bad(a))}


                         (* SYMMETRIC KEYS *)
                                   
(*--- MACKeyDefBegin *)
assume//Name=(MACKey MACSays Send)
  !u,a,b,mk,m. MACKey(u,a,b,mk) /\ Send(u,a,b,m) => MACSays(mk,m)
assume//Name=(MACKey MACSays Bad)
  !u,a,b,mk,m. 
  MACKey(u,a,b,mk) /\ (Bad(a) \/ Bad(b)) => MACSays(mk,m)
(*--- MACKeyDefEnd *)


// the theorem proof relies on protocol code not defining MACSays and MCompKey
(*--- MACKeyThmBegin *)
theorem//Name=(Inv MACKey MACSays)
  !u,a,b,mk,m. MACKey(u,a,b,mk) /\ MACSays(mk,m) =>
  (Send(u,a,b,m) \/ Bad(a) \/ Bad(b))
(*--- MACKeyThmEnd *)

(*--- MACKeyMoreThmBegin *)
theorem//Name=(MACKey MKey)
  !u,a,b,mk. MACKey(u,a,b,mk) => Crypto.MKey(mk)
(*--- MACKeyMoreThmEnd *)

(*--- MACKeyCompThmBegin *)
theorem//Name=(MACKey Secrecy)
  !u,a,b,mk. MACKey(u,a,b,mk) /\ Pub_k(mk) =>
  (Bad(a) \/ Bad(b) \/ (!v. Send(u,a,b,v)))
(*--- MACKeyCompThmEnd *)

ask !u,a,b,mk,x,m. 
  MACKey(u,a,b,mk) /\ IsMAC(m,mk,x) /\ Bytes(m) => 
  (Send(u,a,b,x) \/ Bad(a) \/ Bad(b))


(*--- EncryptionKeyDefBegin *)
assume//Name=(EncryptionKey CanSymEncrypt Encrypt)
  !u,x1,x2,ek,m. EncryptionKey(u,x1,x2,ek) /\ 
  Encrypt(u,x1,x2,m) /\ ((Bad(x1) \/ Bad(x2)) => Pub(m)) => 
  CanSymEncrypt(ek,m)
assume//Name=(EncryptionKey CanSymEncrypt Bad)
  !u,x1,x2,ek,m. EncryptionKey(u,x1,x2,ek) /\ 
  (Bad(x1) \/ Bad(x2)) /\ Pub(m) => CanSymEncrypt(ek,m)
(*--- EncryptionKeyDefEnd *)

(*--- EncryptionKeyThmBegin *)
theorem//Name=(EncryptionKey SKey)
  !u,x1,x2,ek. EncryptionKey(u,x1,x2,ek) => Crypto.SKey(ek)
theorem//Name=(Inv EncryptionKey CanSymEncrypt 1)
  !u,x1,x2,ek,m. EncryptionKey(u,x1,x2,ek) /\ 
  CanSymEncrypt(ek,m) => (Encrypt(u,x1,x2,m) \/ Bad(x1) \/ Bad(x2))
theorem//Name=(Inv EncryptionKey CanSymEncrypt 2)
  !u,x1,x2,ek,m. EncryptionKey(u,x1,x2,ek) /\ 
  CanSymEncrypt(ek,m) /\ (Bad(x1) \/ Bad(x2)) => Pub(m)

conjecture//Name=(EncryptionKey Secrecy)
  !u,x1,x2,ek. EncryptionKey(u,x1,x2,ek) /\ Pub_k(ek) => 
  (Bad(x1) \/ Bad(x2) \/ (!b. Encrypt(u,x1,x2,b) => Pub(b)))
(*--- EncryptionKeyThmEnd *)

// theorem//Name=(EncryptionKey SCompKey)
// !u,x1,x2,ek. EncryptionKey(u,x1,x2,ek) /\ 
//   SCompKey(ek) => (Bad(x1) /\ Bad(x2))
  
private val skeydb: (usage * prin * prin, 
  (u:usage * a:prin * b:prin * sk:key * mk:key){SharedKeyPair(u,a,b,sk,mk)}) Db.t
private val mkSharedKeyPair: u:usage -> a:prin -> b:prin -> 
  (sk:key * mk:key){SharedKeyPair(u,a,b,sk,mk)}
val genSharedKeyPair: u:usage -> a:prin -> b:prin -> unit
private val getSharedKeyPair: u:usage -> a:prin -> b:prin -> 
  (sk:key * mk:key){SharedKeyPair(u,a,b,sk,mk)}
private val ekeydb: (usage * prin * prin, 
  (u:usage * a:prin * b:prin * ek:key){EncryptionKey(u,a,b,ek)}) Db.t

(*--- EncryptionKeyAPIBegin *)
private val mkEncryptionKey: u:usage -> a:prin -> b:prin -> 
  ek:key{EncryptionKey(u,a,b,ek)}
val genEncryptionKey:  u:usage -> a:prin -> b:prin -> unit
private val getEncryptionKey: u:usage -> a:prin -> b:prin -> 
  ek:key{EncryptionKey(u,a,b,ek)}
val leakEncryptionKey: u:usage -> a:prin -> b:prin -> 
  ek:keypub{Bad(a) /\ Bad(b) /\ EncryptionKey(u,a,b,ek)}
(*--- EncryptionKeyAPIEnd *)

private val aes_encrypt: u:usage -> a:prin -> b:prin ->
  ek:key{EncryptionKey(u,a,b,ek)} ->
  m:bytes{Encrypt(u,a,b,m) /\ ((Bad(a) \/ Bad(b)) => Pub(m))} ->
  e:bytes{IsEncryption(e,ek,m) /\ Pub(e)}

private val aes_decrypt: u:usage -> a:prin -> b:prin ->
  ek:key{EncryptionKey(u,a,b,ek)} ->
  e:bytes ->
  m:bytes{(!p. IsEncryption(e,ek,p) => 
          (Encrypt(u,a,b,m) \/ Bad(a) \/ Bad(b) \/ 
	     (!m'. Encrypt(u,a,b,m') => Pub(m')))) /\ 
          ((Bad(a) \/ Bad(b)) => Pub(m))}


private val aes_decrypt_pub: u:usage -> a:prin -> b:prin ->
  ek:key{EncryptionKey(u,a,b,ek) \/ Pub_k(ek)} ->
  e:bytes ->
  m:bytes{(Pub_k(ek) => Pub(m)) /\
           (Pub_k(ek) \/ (!p. IsEncryption(e,ek,p) => Encrypt(u,a,b,m)))}



(*--- MACKeyDbBegin *)
private val mkeydb: (usage * prin * prin, 
  (u:usage * a:prin * b:prin * mk:key){MACKey(u,a,b,mk)}) Db.t
(*--- MACKeyDbEnd *)

(*--- MACKeyAPIBegin *)
private val mkMACKey: u:usage -> a:prin -> b:prin -> 
  mk:key{MACKey(u,a,b,mk)}
val genMACKey:  u:usage -> a:prin -> b:prin -> unit
private val getMACKey: u:usage -> a:prin -> b:prin -> 
  mk:key{MACKey(u,a,b,mk)}
(*--- MACKeyAPIEnd *)

(*--- MACKeyLeakBegin *)
val leakMACKey: u:usage -> a:prin -> b:prin -> 
  mk:keypub{Bad(a) /\ Bad(b) /\ MACKey(u,a,b,mk)}
(*--- MACKeyLeakEnd *)

(* Auxiliary Functions at the level of Principals *)

private val hmacsha1: u:usage -> a:prin -> b:prin ->
  mk:key{MACKey(u,a,b,mk)} -> 
  m:bytes{Send(u,a,b,m)} ->
  h:bytes{IsMAC(h,mk,m) /\ (Pub(m) => Pub(h))}

private val hmacsha1Verify: u:usage -> a:prin -> b:prin ->
  mk:key{MACKey(u,a,b,mk)} -> 
  m:bytes -> h:bytes ->
  unit{Send(u,a,b,m) \/ Bad(a) \/ Bad(b)}


// These injectivity theorems are proved by code inspection
(*--- PrincipalsEventsBegin *)
theorem//Name=(PublicKeyPair Injective1)
  !u0,u1,a0,a1,pk0,pk1,sk.
  PublicKeyPair(u0,a0,pk0,sk) /\ 
  PublicKeyPair(u1,a1,pk1,sk)  => (u0 = u1 /\ a0 = a1 /\ pk0 = pk1)
theorem//Name=(PublicKeyPair Injective2)
!u0,u1,a0,a1,pk,sk0,sk1.
  PublicKeyPair(u0,a0,pk,sk0) /\ 
  PublicKeyPair(u1,a1,pk,sk1)  => (u0 = u1 /\ a0 = a1 /\ sk0 = sk1)
theorem//Name=(EncryptionKey Injective)
  !u0,u1,a0,a1,b0,b1,ek. 
  EncryptionKey(u0,a0,b0,ek) /\ 
  EncryptionKey(u1,a1,b1,ek) => (u0 = u1 /\ a0 = a1 /\ b0 = b1)
theorem//Name=(MACKey Injective)
  !u0,u1,a0,a1,b0,b1,ek. 
  MACKey(u0,a0,b0,ek) /\ 
  MACKey(u1,a1,b1,ek) => (u0 = u1 /\ a0 = a1 /\ b0 = b1)
(*--- PrincipalsEventsEnd *)

// following from functional public-key derivation
ask !u1,u2,x1,x2,pk,sk1,sk2. 
  PublicKeyPair(u1,x1,pk,sk1) /\ 
  PublicKeyPair(u2,x2,pk,sk2) => sk1 = sk2


(*--- DerivedKeyAPIBegin *)
private val mkKeySeed: u:usage -> a:prin -> b:prin -> 
  ek:key{EncryptionKey(u,a,b,ek)}
(*--- DerivedKeyAPIEnd *)


                           (* PASSWORDS *)
                                   
conjecture !u,x1,x2,pwd. 
  Password(u,x1,x2,pwd) => (String(pwd) /\ (Pub(pwd) <=> Bad(x1)))

conjecture !u,u',x1,x2,x1',x2',pwd. 
  Password(u ,x1 ,x2 ,pwd) /\ 
  Password(u',x1',x2',pwd) => (u = u' /\ x1 = x1' /\ x2 = x2')

private val pwddb: (usage * prin * prin, 
  (u:usage * a:prin * b:prin * pwd:str){Password(u,a,b,pwd)}) Db.t

private val mkPassword: u:usage -> c:prin -> s:prin -> pwd:str{Password(u,c,s,pwd)}
val genPassword: u:usage -> c:prin -> s:prin -> unit
private val getPassword: u:usage -> c:prin -> s:prin -> pwd:str{Password(u,c,s,pwd)}
val leakPassword: u:usage -> c:prin -> s:prin -> pwd:str


(* 09-10-29 What is it for?

val user: principalU -> str
val password: principalU -> str
val mkPasswordKey: str -> str -> str -> bytes -> key


val cert: principalX -> bytes
val subject: principalX -> str
val pubkey: principalX -> key
val privkey: principalX -> key

val genUserPassword: str -> unit
val genX509: str -> unit

val getX509Cert: str -> bytes
val getPublicKey: str -> str -> key

val leakUserPassword: str -> principalU
val leakX509: str -> principalX

private val getUserPassword: str -> principalU
private val getPassword: str -> str

private val getX509: str -> str -> principalX
private val getPrivateKey: str -> key

type principalU = 
      {user:str; 
       password: str;}
type principalX = 
{ subject:str;
  cert: bytes;
  pubkey: key;
  privkey: key;}
*)


