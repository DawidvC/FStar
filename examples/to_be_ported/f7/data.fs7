(*
   Copyright 2008-2014 Nikhil Swamy and Microsoft Research

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*)
(* Copyright (c) Microsoft Corporation.  All rights reserved.  *)
(* coqmodule "Crypto" *)
module Data

predicate type ('s,'w,'n,'m) predicates =
  | IsLiteral of 's * 'w
  | IsUtf8 of 's * 'w
  | IsBase64 of 's * 'w
  | IsConcat of 's * 'w * 'n
  | IsXmlText of 's * 'w
  | IsXmlItem of 's * 'w * 'n * 'm
  | XmlString of 's * 'w
  | Qname of 'w
  | Attribute of 'w
  | AttributeList of 'w
  | Item of 'w
  | ItemList of 'w

  | IsHash of 's * 'w
  | IsMAC of 's * 'w * 'n
  | IsSymEncrypt of 's * 'w * 'n
  | IsAsymSign of 's * 'w * 'n
  | IsAsymEncrypt of 's * 'w * 'n
  | IsPK of 's * 'w
  | IsDerivedKey of 's * 'w * 'n
  | IsDerivedSKey of 's * 'w * 'n
  | IsX509Cert of 'w * 's * 's * 's * 's * 'n

(*--- dstrBegin *)
type dstr =
  | Literal of string
  | Base64 of dbytes
(*--- dstrEnd *)
  | Xml of ditem
(*--- dbytesBegin *)
and dbytes =
  | Concat of dbytes * dbytes
  | Utf8 of dstr
  | Fresh of Pi.name
  | Bin of blob
(*--- dbytesEnd *)
  | Num of int
(*--- blobBegin *)
and blob = 
  | Hash of dbytes
  | DerivedKey of dbytes * dbytes 
  | DerivedSKey of dbytes * dbytes 
  | MAC of dbytes * dbytes
  | SymEncrypt of dbytes * dbytes
  | PK of dbytes 
  | AsymSign of dbytes * dbytes
  | AsymEncrypt of dbytes * dbytes
  | X509Cert of dstr * dstr * dstr * dstr * dbytes 
(*--- blobEnd *)

and dqname = dstr * dstr * dstr
and datt = (dqname * dstr) 
and ditem = Txt of dstr | Xn of dqname * (datt list) * (ditem list)

(*--- PredsBegin *)
predicate type 'a preds =
  | String of dstr
  | Bytes of dbytes
  | Pub of 'a
  | Pub_s of dstr
(*--- PredsEnd *)
  | Pub_x of ditem
  | Pub_q of dqname
  | Pub_a of datt
  | Pub_al of datt list
  | Pub_il of ditem list

type 'a pub = x:'a {Pub(x)}  // tend to obsolete this
(*--- typesBegin *)
type str = s:dstr {String(s)}
type bytes = b:dbytes {Bytes(b)}
type strpub = s:str {Pub_s(s)}
type bytespub = x:bytes {Pub(x)}
(*--- typesEnd *)

type qname = q:dqname{Qname(q)}
type att = a:datt{Attribute(a)}
type item = i:ditem{Item(i)}
type itempub = i:item {Pub_x(i)}

(* Nik's additions *)
assume !n. Bytes(Fresh(n))
assume !n. Bytes(Bin(n))

// Definitions
(*--- EncodeEqnBegin *)
definition//Name=(IsLiteral)
  !s,l. IsLiteral(s,l) <=> s=Literal(l)
definition//Name=(IsBase64)
  !s,b. IsBase64(s,b) <=> s=Base64(b)
definition//Name=(IsUtf8)
  !b,s. IsUtf8(b,s) <=> b=Utf8(s)
(*--- EncodeEqnEnd *)

ask !s,b. IsLiteral(b,s) => b=Literal(s)
ask !s. IsLiteral(Literal(s),s)

(* 09-10-22  Integers are currently not documented in the appendix. *)
assume//Name=(Pub Num)
  !i. Pub(Num(i))
private assume//Name=(Bytes Num)
  !i. Bytes(Num(i))

(*--- EncodeInductBegin *)
private assume//Name=(String Literal)
  !c. String(Literal(c))
private assume//Name=(String Base64)
  !b. Bytes(b)  => String(Base64(b))
private assume//Name=(Bytes Utf8)
  !s. String(s) => Bytes(Utf8(s))
assume//Name=(Pub Literal)
  !c. Pub_s(Literal(c))

assume//Name=(Pub Base64)
  !b. Pub(b) => Pub_s(Base64(b)) 
assume//Name=(Pub Utf8)
  !s. Pub_s(s) => Pub(Utf8(s)) 


(* assume//Name=(Pub Base64) *)
(*   !b. Pub(b) => Pub_s(Base64(b))  *)
(* assume//Name=(Pub Utf8) *)
(*   !s,x. IsLiteral(s,x) && Pub_s(s) => Pub(Utf8(s)) *)

(*--- EncodeInductEnd *)

(*--- EncodeThmBegin *)
private theorem//Name=(Bytes Base64)
  !b. String(Base64(b)) => Bytes(b) 
private theorem//Name=(String Utf8)
  !s. Bytes(Utf8(s)) => String(s) 
theorem//Name=(Pub Base64)
  !b. Pub_s(Base64(b)) => Pub(b) 
theorem//Name=(Pub Utf8)
  !s. Pub(Utf8(s)) => Pub_s(s)
(*--- EncodeThmEnd *)

definition//Name=(Data.IsMAC)
  !m,k,b. IsMAC(m,k,b) <=> m=Bin(MAC(k,b))
definition//Name=(Data.IsDerivedKey)
  !k,n1,n2. IsDerivedKey(k,n1,n2) <=> k=Bin(DerivedKey(n1,n2))
(*--- MACEqnEnd *)

(*--- HashEqnBegin *)
definition//Name=(Data.IsHash)
  !b,h. IsHash(h,b) <=> h=Bin(Hash(b))
(*--- HashEqnEnd *)

(*--- SEncEqnBegin *)
definition//Name=(IsSymEncrypt)
  !e,k,b. IsSymEncrypt(e,k,b) <=> e=Bin(SymEncrypt(k,b))
(*--- SEncEqnEnd *)

(*--- PKeyEqnBegin *)
definition//Name=(IsPK)
  !pk,sk. IsPK(pk,sk) <=> pk=Bin(PK(sk))
(*--- PKeyEqnEnd *)

(*--- AEncEqnBegin *)
definition//Name=(IsAsymEncrypt)
  !e,k,b. IsAsymEncrypt(e,k,b) <=> e=Bin(AsymEncrypt(k,b))
definition//Name=(Data.IsDerivedSKey)
  !k,n1,n2. IsDerivedSKey(k,n1,n2) <=> k=Bin(DerivedSKey(n1,n2))
(*--- AEncEqnEnd *)

(* was:
assume//Name=(IsAsymEncrpt)
!e,k,b. IsAsymEncrypt(e,k,b) <=>
  (?sk. k=Bin(PK(sk)) /\ e=Bin(AsymEncrypt(k,b)))
*)

(*--- CertEqnBegin *)
definition//Name=(IsX509Cert)
  !c,i,n,s,a,k. IsX509Cert(c,i,n,s,a,k) <=> c=Bin(X509Cert(i,n,s,a,k))
(*--- CertEqnEnd *)

(*--- SigEqnBegin *)
definition//Name=(IsAsymSign)
  !s,k,b. IsAsymSign(s,k,b) <=> s=Bin(AsymSign(k,b))
(*--- SigEqnEnd *)

(*--- ConcatEqnBegin *)
definition//Name=(IsConcat)
  !c,b1,b2. IsConcat(c,b1,b2) <=> c=Concat(b1,b2)
(*--- ConcatEqnEnd *)

(*--- ConcatInductBegin *)
private assume//Name=(Bytes Concat)
  !b1,b2. Bytes(b1) /\ Bytes(b2) => Bytes(Concat(b1,b2))
assume//Name=(Pub Concat)
  !b1,b2. Pub(b1) /\ Pub(b2) => Pub(Concat(b1,b2))
(*--- ConcatInductEnd *)

(*--- ConcatThmBegin *)
theorem//Name=(Bytes Concat Invert)
  !b1,b2. Bytes(Concat(b1,b2)) => (Bytes(b1) /\ Bytes(b2))
theorem//Name=(Pub Concat Invert)
  !b1,b2. Pub(Concat(b1,b2)) => (Pub(b1) /\ Pub(b2))
(* ask//Name=(Concat Injective) *)
(*   !b1,b2,b3,b4. Concat(b1,b2) = Concat(b3,b4) => b1=b3 /\ b2=b4 *)
(*--- ConcatThmEnd *)


(* these help Z3 with equivalences *)

ask !sk,pk. IsPK(pk,sk) => pk = Bin(PK(sk))
ask !sk. IsPK(Bin(PK(sk)),sk)

ask !b,h. IsHash(h,b) => (h = Bin(Hash(b)))
ask !b. IsHash(Bin(Hash(b)),b)

ask !m,k,b. IsMAC(m,k,b) => m=Bin(MAC(k,b))
ask !k,b. IsMAC(Bin(MAC(k,b)),k,b)

ask !k,b,e. IsSymEncrypt(e,k,b) => (e=Bin(SymEncrypt(k,b)))
ask !b,k. IsSymEncrypt(Bin(SymEncrypt(k,b)),k,b) (* NIK: removed extra variable e *)

ask !k,b,e. IsAsymEncrypt(e,k,b) => e=Bin(AsymEncrypt(k,b))
ask !k,b. IsAsymEncrypt(Bin(AsymEncrypt(k,b)),k,b)

ask !s,k,b. IsAsymSign(s,k,b) => s=Bin(AsymSign(k,b))
ask !k,b. IsAsymSign(Bin(AsymSign(k,b)),k,b)

ask !k,n1,n2. IsDerivedKey(k,n1,n2) => k = Bin(DerivedKey(n1,n2))
ask !n1,n2. IsDerivedKey(Bin(DerivedKey(n1,n2)),n1,n2)

ask !k,n1,n2. IsDerivedSKey(k,n1,n2) => k = Bin(DerivedSKey(n1,n2))
ask !n1,n2. IsDerivedSKey(Bin(DerivedSKey(n1,n2)),n1,n2)

ask !c,i,n,s,a,k. IsX509Cert(c,i,n,s,a,k) => (c = Bin(X509Cert(i,n,s,a,k)))
ask !i,n,s,a,k. IsX509Cert(Bin(X509Cert(i,n,s,a,k)),i,n,s,a,k)

ask !s,b. IsUtf8(b,s) => b=Utf8(s)
ask !s. IsUtf8(Utf8(s),s)

ask !s,b. IsBase64(s,b) => s=Base64(b)
ask !b. IsBase64(Base64(b),b)

ask !c,b1,b2. IsConcat(c,b1,b2) => c=Concat(b1,b2)
ask !b1,b2. IsConcat(Concat(b1,b2),b1,b2)



private val bytes:  Pi.name -> dbytes
private val ibytes: dbytes -> Pi.name

val int_to_bytes: i:int -> b:bytes{b = Num(i)}
val bytes_to_int: b:bytes -> i:int{b = Num(i)}

(*--- EncodeAPIBegin *)
val str: l:string -> s:strpub{IsLiteral(s,l)}
val istr: s:str -> l:string{IsLiteral(s,l)}
val base64: b:bytes -> s:str{IsBase64(s,b)}
val ibase64: s:str -> b:bytes{IsBase64(s,b)}
val utf8: s:str -> b:bytes{IsUtf8(b,s)}
val iutf8: b:bytes -> s:str{IsUtf8(b,s)}
(*--- EncodeAPIEnd *)

(* length insensitive "raw" concatenation *)
val append: bytes -> bytes -> bytes

(*--- ConcatAPIBegin *)
val concat: b1:bytes -> b2:bytes -> c:bytes{ IsConcat(c,b1,b2)}
val iconcat: c:bytes -> (b1:bytes * b2:bytes){ IsConcat(c,b1,b2) }
(*--- ConcatAPIEnd *)

val concat3: b1:bytes -> b2:bytes -> b3:bytes -> c:bytes{c = Concat(b1,Concat(b2,b3))}
val iconcat3: c:bytes -> (b1:bytes * b2:bytes * b3:bytes){c = Concat(b1,Concat(b2,b3))}

val concat4: b1:bytes -> b2:bytes -> b3:bytes -> b4:bytes -> c:bytes{c = Concat(b1,Concat(b2,Concat(b3,b4)))}
val iconcat4: c:bytes -> (b1:bytes * b2:bytes * b3:bytes * b4:bytes){c = Concat(b1,Concat(b2,Concat(b3,b4)))}

val concat6: b1:bytes -> b2:bytes -> b3:bytes -> b4:bytes -> b5:bytes -> b6:bytes -> c:bytes{c = Concat(b1,Concat(b2,Concat(b3,Concat(b4,Concat(b5,b6)))))}
val iconcat6: c:bytes -> (b1:bytes * b2:bytes * b3:bytes * b4:bytes * b5:bytes * b6:bytes){c = Concat(b1,Concat(b2,Concat(b3,Concat(b4,Concat(b5,b6)))))}

val fpstr: 'a -> str -> unit 
val fpbytes: 'a -> bytes -> unit 
val fpitem: 'a -> item -> unit 


val string_of_int: i:int -> s:string{s = SofI(i)}
val int_of_string: s:string -> i:int{s = SofI(i)}

