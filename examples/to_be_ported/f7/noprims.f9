module Prims

(* ravi: i need these to precede other types *)
type l_and :: * => * => *
type l_or :: * => * => *
type l_not :: * => *
type l_iff :: * => * => *
type l_implies :: * => * => *

prop true_prop
prop false_prop
prop Eq :: 'a => 'a => *

type NTuple =
  | Tuple_UU : 'a -> 'b -> ('a * 'b)
  | Tuple_UA : 'a -> 'b::+ -> ('a * 'b) (* affine qualifier on pair computed from components *)
  | Tuple_AU : 'a::+ -> 'b -> ('a * 'b)
  | Tuple_AA : 'a::+ -> 'b::+ -> ('a * 'b)

type pf :: * => *  =
  | T                : pf<true_prop>

type object
(* type bool *)
type unit
type int
type string
type bytes
prop Serialized :: 'a => bytes => $E

(* val op_Equality : x:'a -> y:'a -> {z:bool | z=true <=> x=y} *)
(* val _dummy_op_AmpAmp: x:bool -> y:bool -> {z:bool | z=true =>  x=true &&  y=true} *)
(* val _dummy_op_BarBar: x:bool -> y:bool -> {z:bool | (z=true => x=true ||  y=true) && (z=false => x=false &&  y=false)} *)
(* val _dummy_op_Multiply : int -> int -> int *)
(* val _dummy_op_Subtraction : int -> int -> int *)
(* val _dummy_op_Addition : int -> int -> int *)
(* val _dummy_op_GreaterThanOrEqual : int -> int -> bool *)
(* val _dummy_op_Negation: x:bool -> {y:bool | (y=true => x=false) && (y=false => x=true)} *)
