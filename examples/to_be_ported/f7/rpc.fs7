(*
   Copyright 2008-2014 Nikhil Swamy and Microsoft Research

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*)
(* Copyright (c) Microsoft Corporation.  All rights reserved.  *)
module RPC
open Data
open Crypto

// ------------------------------------------------------------------- //
// Application predicate symbols                                       //
// ------------------------------------------------------------------- //

type ('w)fact =
  | Request of str * str * str
  | RecvRequest of str * str * str
  | Response of str * str * str * str
  | RecvResponse of str * str * str * str
  | Bad of str
  | KeyAB of 'w * str * str
  | Requested of 'w * str 
  | Responded of 'w * str * str

(*--- KeyABConstraintBegin *)
theorem//Name=(KeyAB Injective)
  !k,a,b,a',b'. KeyAB(k,a,b) /\ KeyAB(k,a',b') => (a=a') /\ (b=b')
(*--- KeyABConstraintEnd *)
// CONSTRAINT proved by simple code inspection

definition//Name=(RecvRequest)
(*--- RecvRequestEqnBegin *)
!a,b,s. RecvRequest(a,b,s) <=> (Request(a,b,s) \/ Bad(a) \/ Bad(b))
(*--- RecvRequestEqnEnd *)

definition//Name=(RecvResponse)
(*--- RecvResponseEqnBegin *)
!a,b,s,t. RecvResponse(a,b,s,t) <=> 
  (Request(a,b,s) /\ Response(a,b,s,t)) \/ Bad(a) \/ Bad(b)
(*--- RecvResponseEqnEnd *)

(*--- ReqResEqnBegin *)
definition//Name=(Requested)
  !m,s. Requested(m,s) <=>
    m = Concat(Utf8(Literal("Request")),Utf8(s))
definition//Name=(Responded)
  !m,s,t. Responded(m,s,t) <=>
    m = Concat(Utf8(Literal("Response")),Concat(Utf8(s),Utf8(t)))
(*--- ReqResEqnEnd *)

//ask fails in Fine
assume !m,s,t. Responded(m,s,t) /\ Pub_s(s) /\ Pub_s(t) => Pub(m)

ask//Name=(exhibit a message that is neither a request or response)
 !s,s',t'. not (Requested(Utf8(Literal("")),s)) /\	
           not (Responded(Utf8(Literal("")),s',t'))

(*--- NotEveryBegin *)
theorem//Name=(not every message is a request or response)
 ?v. !s,s',t'. not (Requested(v,s)) /\ not (Responded(v,s',t'))
(*--- NotEveryEnd *)

(*--- FormatsBegin *)
// ask fails in Fine
assume//Name=(request and response have disjoint ranges)
 !v,v',s,s',t'. (Requested(v,s) /\ Responded(v',s',t')) => (v <> v')
// ask fails in Fine
assume//Name=(request is injective)
 !v,v',s,s'. (Requested(v,s) /\ Requested(v',s') /\ v = v') => (s = s')
// ask fails in Fine
assume//Name=(response is injective)
 !v,v',s,s',t,t'. 
 (Responded(v,s,t) /\ Responded(v',s',t') /\ v = v') => (s = s' /\ t = t')
(*--- FormatsEnd *)



(* these assumes and the ask below follow from (KeyAB MACSays) 
assume//Name=(MACSays Request) 
!a,b,k,m,s. KeyAB(k,a,b) /\ Requested(m,s) /\
    Request(a,b,s) => MACSays(k,m) 

assume//Name=(MACSays Response) 
!a,b,k,m,s,t. KeyAB(k,a,b) /\ Responded(m,s,t) /\
    Response(a,b,s,t) => MACSays(k,m)

assume//Name=(MACSays Bad) 
!a,b,k,m,s. KeyAB(k,a,b) /\ 
    (Bad(a) \/ Bad(b))  => MACSays(k,m) 

*)

(*--- MACSaysBegin *)
theorem//Name=(KeyAB MACSays)
!a,b,k,m. KeyAB(k,a,b) => ( MACSays(k,m) <=> 
(  (?s. Requested(m,s) /\ Request(a,b,s)) \/ 
  (?s,t. Responded(m,s,t) /\ Response(a,b,s,t)) \/ 
  (Bad(a) \/ Bad(b))))
(*--- MACSaysEnd *)

ask//Name=(MACSays Request Thm) 
  !a,b,k,m,s. KeyAB(k,a,b) /\ Requested(m,s) /\
    MACSays(k,m) => (Request(a,b,s) \/ Bad(a) \/ Bad(b))

ask//Name=(MACSays Response Thm) 
  !a,b,k,m,s,t. KeyAB(k,a,b) /\ Responded(m,s,t) /\
    MACSays(k,m) => (Response(a,b,s,t) \/ Bad(a) \/ Bad(b))

(*--- KeyABPubBadBegin *)
theorem//Name=(KeyAB Pub Bad)
  !a,b,k. KeyAB(k,a,b) /\ Pub_k(k) => Bad(a) \/ Bad(b)
(*--- KeyABPubBadEnd *)
// We need to prove this property by hand because we don't have 
// an event anymore tracking actual calls to hmac_keycomp.


// ------------------------------------------------------------------- //
// Application specific definitions                                    //
// ------------------------------------------------------------------- //

(*--- AppBegin *)
type payload = strpub
val request: s:payload -> m:bytespub{Requested(m,s)}
val response: s:payload -> t:payload -> m:bytespub{Responded(m,s,t)}
val service: payload -> payload
type (;a:str,b:str)keyab = k:key { MKey(k) /\ KeyAB(k,a,b) }
val mkKeyAB: a:str -> b:str -> k: (;a,b)keyab
val client: a:str -> b:str -> k: (;a,b)keyab -> payload -> unit
val server: a:str -> b:str -> k: (;a,b)keyab -> unit
(*--- AppEnd *)

(*--- AdversaryBegin *)
val setup: strpub -> strpub -> 
  (strpub -> unit) * (unit -> unit) * (unit -> keypub) * (unit -> keypub)
(*--- AdversaryEnd *)

val a:strpub
val b:strpub

