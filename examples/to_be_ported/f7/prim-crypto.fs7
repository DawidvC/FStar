(*
   Copyright 2008-2014 Nikhil Swamy and Microsoft Research

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*)
(* Copyright (c) Microsoft Corporation.  All rights reserved.  *)
(*--- primcryptoBegin *)
module PrimCrypto
open Pi

(* Primitive Tables *)
(*--- tableBegin *)
type ('a,'b) TableEvent = Table of (Un * 'a * 'b)
type ('a,'b) Table = (n:Un * 
   	              l: (a:'a -> b:'b{Table(n,a,b)}) * 
                      rl: (b:'b -> a:'a{Table(n,a,b)}))



type ('a,'b;n:Un) TableChan = (a:'a * b:'b{Table(n,a,b)}) list Pi.chan 
private val mkTableChan: n:string -> name:Un -> ('a,'b;name) TableChan
private val findleft: n:Un -> a:'a -> (aa:'a * bb:'b{Table(n,aa,bb)}) list -> 
	                       (b:'b{Table(n,a,b)}) option
private val findright: n:Un -> b:'b -> (aa:'a * bb:'b{Table(n,aa,bb)}) list -> 
	                       (a:'a{Table(n,a,b)}) option
private val lookup: name:Un -> ('a,'b;name) TableChan -> (unit -> 'b) -> a:'a -> b:'b{Table(name,a,b)} 
private val revlookup: name:Un -> ('a,'b;name) TableChan -> (unit -> 'a) -> b:'b -> a:'a{Table(name,a,b)}

(* malleability? *)
(* assume !n,a,b,aa. Table(n,a,b) => Table(n,aa,b) *)

private val malleate: ('a,'b) Table -> ('a list -> 'a) -> 'b list -> 'b

val table: string -> (unit -> 'a) -> (unit -> 'b) -> ('a,'b) Table
(*--- tableEnd *)

(* Derived Seals *)
(*--- sealBegin *)
type 'a Seal = ('a -> Un) * (Un -> 'a) 
val mkSeal: string -> 'a Seal
(*--- sealEnd *)
type 'a SealRef = (('a* Un) list) ref
(*--- primcryptoEnd *)
