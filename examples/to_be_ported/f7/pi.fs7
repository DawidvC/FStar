(*
   Copyright 2008-2014 Nikhil Swamy and Microsoft Research

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*)
module Pi
 
(* Copyright (c) Microsoft Corporation.  All rights reserved.  *)

val fork : (unit -> unit) -> unit 

type name
val name: string -> name  (* string used only for pretty-printing *)

type ('a::0) chan (* NIK: What does the ::0 mean? Invariance? *)
val chan: string -> 'a chan

// for now we do not support -> 'a
//val fatal: string -> t:unit{ false }

val send: 'a chan -> 'a -> unit
val recv: 'a chan -> 'a
//val sleep: int -> unit (* for gentle thread scheduling in examples*)
//type 'a trace = Trace of 'a list ref
//val query: 'a trace -> ('a -> 'a)  -> bool

//type 'a trace
//val trace: unit -> 'a trace

// These functions have special types 

private val Assume: 'a -> unit
private val expect: 'a -> unit 

type Un = name
//val pubChan: name chan
//val publish: name -> Un

type 'b annot = unit
val coerce: 'a -> 'b annot 

type ('a,'b,'c) postpred = 
  | Post of 'a * 'b * 'c
  | Post2 of 'a * 'b * 'c
  | Pre of 'a * 'b
  | Pre2 of 'a * 'b
  | Call of 'a * 'b
  | Return of 'a * 'b * 'c
  | Deterministic of 'a
  | Determ of 'a

assume (!f,a. Call(f,a) => Pre2(f,a))
assume (!f,a,b. Return(f,a,b) => Call(f,a))
assume (!f,a,b. Return(f,a::[],b) => Post(f,a,b))
assume (!f,l,c. Return(f,l,c) => Post2(f,l,c))
assume (!f,a,b,l,c. Return(f,a::[],b) /\ Return(b,l,c) => Return(f,a::l,c))

assume (!f. Post2(f,[],f))
assume (!f,g,h,t,res. (Post(f,h,g) /\ Post2(g,t,res)) => Post2(f,h::t,res))
//assume (!f,l,res. Post2(f,l,res) => ((l = [] /\ res = f) \/ (?h,t,g. l = h::t /\ Post(f,h,g) /\ Post2(g,t,res))))

assume (!f. Pre2(f,[]))
assume (!f,g,h,t. (Pre(f,h) /\ Post(f,h,g) /\ Pre2(g,t)) => Pre2(f,h::t))
//assume (!f,l. Pre2(f,l) => ((l = []) \/ (?h,t,g. l = h::t /\ Pre(f,h) /\ Post(f,h,g) /\ Pre2(g,t))))

(*
ask (!f,x,r. Post(f,x,r) => Post2(f,x::[],r))
ask (!f,x,r. Post2(f,x::[],r) => Post(f,x,r))
ask (!f,g,h,t,res. (Post(f,h,g) /\ Post(g,t,res)) => Post2(f,h::t::[],res))
ask (!f,h,t,res. Post2(f,h::t::[],res) => (?g. Post(f,h,g) /\ Post(g,t,res)))

assume !f. Determ(f) <=> (!x,r,r'. (Post(f,x,r) /\ Post(f,x,r')) => r=r')
assume !f. Deterministic(f) <=> (!h,t,r,r'. Post(f,h,r) => (Determ(f) /\ Deterministic(r)))
*)

