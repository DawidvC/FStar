module Prims

(* ravi: i need these to precede other types *)
type l_and :: * => * => *
type l_or :: * => * => *
type l_not :: * => *
type l_iff :: * => * => *
type l_implies :: * => * => *

prop true_prop
prop false_prop
prop Eq :: 'a => 'a => *

type NTuple =
  | Tuple_UU : 'a -> 'b -> ('a * 'b)
  | Tuple_UA : 'a -> 'b::+ -> ('a * 'b) (* affine qualifier on pair computed from components *)
  | Tuple_AU : 'a::+ -> 'b -> ('a * 'b)
  | Tuple_AA : 'a::+ -> 'b::+ -> ('a * 'b)

type pf :: * => *  =
  | T                : pf<true_prop>

type object
type bool
type unit
type int = | Zero | Succ of int
type bytes
type string = | SofI of int

val expect< 'a::*, 'P::* > : (x:'a{P}) -> (y:unit{P})
val Assume< 'a::*, 'P::* > : 'a -> (x:unit{P})
val failwith : string -> 'a

type list :: * => * = 
   | Nil : list<'a>
   | Cons : ('a * list<'a>) -> list<'a>

type option :: * => * =
   | None : option<'a>
   | Some : 'a -> option<'a>

type ref :: * => *

val _dummy_op_ColonColon: 'a -> list<'a> -> list<'a>
val _dummy_op_LBrackRBrack: list<'a>

(*
(* type Db_t :: * => * => * *)

(* val create : unit -> Db_t<'a,'b> *)
(* val select: Db_t<'a,'b> -> 'a -> 'b *)
(* val insert: Db_t<'a,'b> -> 'a -> 'b -> unit *)
*)
val op_Equality : x:'a -> y:'a -> {z:bool | z=true <=> x=y}
val _dummy_op_AmpAmp: x:bool -> y:bool -> {z:bool | z=true =>  x=true &&  y=true}
val _dummy_op_BarBar: x:bool -> y:bool -> {z:bool | (z=true => x=true ||  y=true) && (z=false => x=false &&  y=false)}
val _dummy_op_Multiply : int -> int -> int
val _dummy_op_Subtraction : int -> int -> int
val _dummy_op_Addition : int -> int -> int
val _dummy_op_GreaterThanOrEqual : int -> int -> bool
val _dummy_op_Negation: x:bool -> {y:bool | (y=true => x=false) && (y=false => x=true)}

end 



