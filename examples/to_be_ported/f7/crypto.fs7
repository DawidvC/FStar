(*
   Copyright 2008-2014 Nikhil Swamy and Microsoft Research

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*)
(* Copyright (c) Microsoft Corporation.  All rights reserved.  *)
module Crypto
// Verified by:  make crypto.tc7 + make libcoq.vo

open Data 
open List
open PrimCrypto

type smoke = Smoke1 | Smoke2
type dummy = IsBytes of bytes

(*--- keyBegin *)
type key = 
  | SymKey of bytes
  | AsymPrivKey of bytes
  | AsymPubKey of bytes
(*--- keyEnd *)
  | SealKey of (bytes,bytes) Table // seal-based keys

predicate type keypred = Pub_k of key
(* predicate type foobar = Pubk_Imp_Pub of bytes * bytes *)
(* assume !k,b. (Pubk_Imp_Pub(k, b) <=> (Pub(k) => (Pub(b)))) *)


// Each case corresponds to a different internal representation for the keys
//
// Following WS-*, the same (cert-based) public/private keypair may be
// used both for encryption and signing. Otherwise it would be simpler to use 
// separate keys for each usage.

(*--- typesBegin *)
type keypub = k:key { Pub_k(k) }
(*--- typesEnd *)

// Transparency of key constructors (could be auto-generated)


(*--- KeyInductBegin *)
assume//Name=(Pub SymKey)
  !b. Pub(b) => Pub_k(SymKey(b))
assume//Name=(Pub AsymPubKey)
  !b. Pub(b) => Pub_k(AsymPubKey(b))
assume//Name=(Pub AsymPrivKey)
  !b. Pub(b) => Pub_k(AsymPrivKey(b))
(*--- KeyInductEnd *)

(*--- KeyThmBegin *)
theorem//Name=(Pub SymKey)
  !b. Pub_k(SymKey(b)) => Pub(b)
theorem//Name=(Pub AsymPubKey)
  !b. Pub_k(AsymPubKey(b)) => Pub(b) 
theorem//Name=(Pub AsymPrivKey)
  !b. Pub_k(AsymPrivKey(b)) => Pub(b) 
(*--- KeyThmEnd *)

(*--- MACPredsBegin *)
predicate type macpreds = 
  | MKey of key  
  | MCompKey of key        
  | MACSays of key * bytes 
  | IsMAC of bytes * key * bytes
(*--- MACPredsEnd *)

(*--- EncryptEqnBegin *)
predicate type encpreds =
  | SKey of key
  | SCompKey of key             
  | CanSymEncrypt of key * bytes    
  | IsEncryption of bytes * key * bytes 
(*--- EncryptEqnEnd *)

(*--- SignEqnBegin *)
predicate type signpreds = 
  | SignSays of key * bytes
  (* | IsSignature of bytes * key * bytes *)
  | IsSignature of bytes * key * bytes (* NIK: Changed to Coq type *)
(*--- SignEqnEnd *)

(*--- AsymEncryptEqnBegin *)
predicate type aencpreds =
  | CanAsymEncrypt of key * bytes
  (* | IsAsymEncryption of key * bytes * bytes *) 
  | IsAsymEncryption of bytes * key * bytes (* NIK: lib.v says IsAsymEncryption: bytes -> key -> bytes -> Prop *)
(*--- AsymEncryptEqnEnd *)

// Predicates defined by this module
// These predicates may be used but not assumed in user code
predicate type pred =
  | KeySeed of bytes
  | SlKey of key
  | IsPubKey of key * key
  | Nonce of bytes
  | SingleUseKey of key * bytes
  | DerivedMKey of key * bytes * bytes
  | DerivedSKey of key * bytes * bytes
  | IsDerivedKey of key * bytes * bytes
  | IsDerivedSKey of key * bytes * bytes
  | MACVerified of key * bytes
  | SignVerified of key * bytes
  | SymEncryptVerified of key * bytes
  (* | IsEncryption of bytes * key * bytes  *) (* NIK: duplicate predicate *)
  | IsSealEncryption of key * bytes * bytes
  | Certificate of key * str * str * str * str * bytes

(*--- UsageBegin *)
type usage =
  | KeySeedName 
  | MKeyName
  | SKeyName
  | SingleUseKeyName of bytes
  | PKeyName
  | PasswordName
  | GuidName
  | NonceName
  | AttackerName
(*--- UsageEnd *)

(*--- edbBegin *)
predicate type event = 
  | FreshBytes of bytes * usage (* defined in crypto.ml *)
  | PubNonce of bytes           (* defined in protocols *)
(*--- edbEnd *)

/// Nonces 

(*--- NameConstraintBegin *)
private theorem//Name=(Bytes Fresh) 
  !b,u. FreshBytes(b,u) => Bytes(b)
theorem//Name=(Name Constraint)
  !b,u,u'. FreshBytes(b,u) /\ FreshBytes(b,u') => u=u'
theorem//Name=(FreshBytes Fresh)
  !b,u. FreshBytes(b,u) => ?n. b = Fresh(n)
(*--- NameConstraintEnd *)
// proved by hand on the F# code of freshbytes,
// which is the only place that assumes FreshBytes.

(*--- NonceEqnBegin *)
private definition//Name=(Nonce)
  !b. Nonce(b) <=> FreshBytes(b,NonceName)
(*--- NonceEqnEnd *)
  
(*--- NonceInductBegin *)
theorem//Name=(Pub Nonce)
  !b. Nonce(b) /\ PubNonce(b) => Pub(b)
(*--- NonceInductEnd *)

(*--- NonceThmBegin *)
theorem//Name=(Inv Pub Nonce)
  !b. Nonce(b) /\ Pub(b) => PubNonce(b)
(*--- NonceThmEnd *)

(*--- NonceAPIBegin *)
val mkNonce: unit -> b:bytes{Nonce(b)}
val mkNonce256: unit -> b:bytes{Nonce(b)}
(*--- NonceAPIEnd *)

(*--- AttackerBegin *)
assume//Name=(Pub Attacker)
  !n. FreshBytes(Fresh(n),AttackerName) => Pub(Fresh(n))
(*--- AttackerEnd *)
val mkbytespub: unit -> bytespub

// Definitions for Keys and Certificates

// TODO 09-10-30 consider folding in all crypto structural predicate 
// the fact that the first argument is Bytes.
(*--- MACEqnBegin *)
private definition//Name=(IsMAC)
  !m,k,b. IsMAC(m,k,b) <=> ?kb. k=SymKey(kb) /\ Data.IsMAC(m,kb,b)

private definition//Name=(MACVerified)
  !k,b. MACVerified(k,b) <=>
  Bytes(b) /\ (MACSays(k,b) \/ (Pub_k(k) /\ MKey(k)))

private definition//Name=(MCompKey)
  !k. MCompKey(k) <=> (MKey(k) /\ Pub_k(k)) 

private definition//Name=(IsDerivedKey)
  !k,b1,b2. IsDerivedKey(k,b1,b2) <=>
  ?b. k=SymKey(b) /\ Data.IsDerivedKey(b,b1,b2)

private definition//Name=(KeySeed)
  !b. KeySeed(b) <=> FreshBytes(b,KeySeedName)
(*--- MACEqnEnd *)

//(* Was:
//assume//Name=(MKey IsDerivedKey)
//!b1,b2,k.
//  MKeySeed(b1) /\ Nonce(b2) /\
//  IsDerivedKey(k,b1,b2) => MKey(k)
//*)

//assume//Name=(Pub MKey)
//  !k. MKey(k) /\ (!b. Pub(b) => MACSays(k,b)) => Pub_k(k)
(*--- MACInductBegin *)
private assume//Name=(MKey MKeyName)
  !b. FreshBytes(b,MKeyName) => MKey(SymKey(b)) 
theorem//Name=(Pub MKey)
  !k. MKey(k) /\ (!b. MACSays(k,b)) => Pub_k(k)
 
private theorem//Name=(Bytes IsMAC)
  !m,k,b. MKey(k) /\  MACVerified(k,b) /\ IsMAC(m,k,b) => Bytes(m)
theorem//Name=(Pub IsMAC)
  !m,k,b. Pub(b) /\ IsMAC(m,k,b) /\ MKey(k) /\ MACVerified(k,b)  
    => Pub(m)

(* NIK: Reordered clauses in thm below to help type inference *)
private theorem//Name=(Bytes IsMAC Pub)
  !m,kb,b.  Pub_k(SymKey(kb)) /\ IsMAC(m,SymKey(kb),b) /\ Bytes(kb) /\ Bytes(b) /\ Pub(b) 
     => Bytes(m)

theorem//Name=(Pub IsMAC Pub)
  !m,k,b. Pub(b) /\ IsMAC(m,k,b) /\ Pub_k(k)  => Pub(m)
(*--- MACInductEnd *)


(* KB tried the following for Otway-Rees 
theorem//Name=(Pub IsMAC Pub)
    !m,k,b. Pub(b) /\ IsMAC(m,k,b) => Pub(m)
*)

(* now additional rules and theorems for derived keys *)


(*10-01-11 changed PubIsDerivedKey, removing Bytes(b1), to be validated *)
(*--- MACdkInductBegin *)
private assume//Name=(Bytes IsDerivedKey)
  !b1,b2,b. IsBytes(b1) /\ IsBytes(b2) /\ Bytes(b1) /\ Bytes(b2) /\ Data.IsDerivedKey(b,b1,b2) 
    => Bytes(b)

(* Nik: this one should help in proving the last ask in this file. *)
assume//Name=(Pub IsDerivedKey)
  !b1,b2,k. IsBytes(b2) /\ Pub(b1) /\ Bytes(b2) /\ Data.IsDerivedKey(k,b1,b2) 
    => Pub(k)
  
assume//Name=(Pub KeySeed)
  !ks. KeySeed(ks) /\ 
  (!k,n. IsDerivedKey(k,ks,n) => !b. MACSays(k,b)) /\
  (!k,n. IsDerivedSKey(k,ks,n) => (!b. CanSymEncrypt(k,b) => Pub(b)))
    => Pub(ks)

(* NIK: reordered clauses below *)
private assume//Name=(MKey IsDerivedKey)
  !b1,b2,k. KeySeed(b1) /\ IsDerivedKey(k,b1,b2) /\ Bytes(b2) => MKey(k)
(*--- MACdkInductEnd *)

//assume !k. MKey(k) /\ (!b. Bytes(b) => MACSays(k,b)) => Pub_k(k)

ask !k,b. MACVerified(k,b) => Bytes(b) /\ (MACSays(k,b) \/ (Pub_k(k) /\ MKey(k)))
ask !k,b. MACSays(k,b) /\  Bytes(b) => MACVerified(k,b) 
ask !k,b. IsBytes(b) /\ Bytes(b) /\ (Pub_k(k) /\ MKey(k)) => MACVerified(k,b) 
ask !k,b. MACVerified(k,b) => (MACSays(k,b) \/ Pub_k(k))

(*--- MACThmBegin *)
ask//Name=(IsMAC Injective)
  !m,k,k',b,b'. IsMAC(m,k,b) /\ IsMAC(m,k',b') => k=k' /\ b=b'

(* NIK: Reordered clauses *)
theorem//Name=(MKey Inversion)
  !k. MKey(k) => 
  (?kb. k = SymKey(kb) /\ FreshBytes(kb,MKeyName)) \/
  (?b1,b2. KeySeed(b1) /\ IsDerivedKey(k,b1,b2) /\ Bytes(b2))

theorem//Name=(IsMAC MACVerified)
  !m,k,b. IsMAC(m,k,b) /\ Bytes(m) /\ MKey(k) => MACVerified(k,b) 

theorem//Name=(Inv MKey Pub)
  !k,b. Pub_k(k) /\ MKey(k) => MACSays(k,b) 
(*--- MACThmEnd *)

// assume !k,k0.
//   Pub(k) /\ DerivedMKey(k0,k) => (Pub(k0) \/ MCompKey(k))

// discarded:
// assume !k. 
//   Pub(k) /\ MKey(k) => (!b. Bytes(b) => MACSays(k,b))

// convenient abbrevation, but currently unused
//assume !k,b1,b2. DerivedMKey(k,b1,b2) <=> 
//    (KeySeed(b1) /\ Bytes(b2) /\ IsDerivedKey(k,b1,b2))

// convenient abbrevation, but currently unused
// assume !k,b1,b2. DerivedSKey(k,b1,b2) <=> 
// (KeySeed(b1) /\ Bytes(b2) /\ IsDerivedSKey(k,b1,b2))

(*--- SEncEqnBegin *)
private definition//Name=(IsEncryption)
  !e,k,b. IsEncryption(e,k,b) <=> 
  (?kb. k = SymKey(kb) /\ IsSymEncrypt(e,kb,b))

private definition//Name=(IsDerivedSKey)
  !k,b1,b2. IsDerivedSKey(k,b1,b2) <=>
  (?b. k = SymKey(b) /\ Data.IsDerivedSKey(b,b1,b2))
 
(* name clash in coq?  ADG: we can see this as a theorem that follows from the inductive defn *)
private theorem//Name=(SKey)
  !k. SKey(k) <=> 
  (?kb. k = SymKey(kb) /\ FreshBytes(kb,SKeyName)) \/ 
  (?kb,b. k = SymKey(kb) /\ FreshBytes(kb,SingleUseKeyName(b))) \/ 
  (?b1,b2. KeySeed(b1) /\ IsDerivedSKey(k,b1,b2) /\ Bytes(b2))

private definition//Name=(SCompKey)
  !k. SCompKey(k) <=> (SKey(k) /\ Pub_k(k))

private definition//Name=(SingleUseKey)
  !k,b. SingleUseKey(k,b) <=> 
    (?kb. k = SymKey(kb) /\ FreshBytes(kb,SingleUseKeyName(b)))
    
private definition//Name=(SymEncryptVerified)
  !k,b. SymEncryptVerified(k,b) <=> (Bytes(b) /\ (CanSymEncrypt(k,b) \/ (Pub_k(k) /\ SKey(k))))
(*--- SEncEqnEnd *)

ask//Name=(IsEncryption Injective)
  !c,ek1,ek2,b1,b2. IsEncryption(c,ek1,b1) /\ IsEncryption(c,ek2,b2) => (ek1=ek2 /\ b1=b2)


(* CF 09-06-27 Now the underlying symmetric encryption is officially authentic;
   added undocumented assumptions, but only for SymEncryptVerified *)

(* inductive, but with a non-trivial proof *)
(*--- SEncInductBegin *)
private theorem//Name=(Bytes SEnc)
  !k,b,e. 
  SKey(k) /\ CanSymEncrypt(k,b) /\ IsEncryption(e,k,b) /\ Bytes(b)
  => Bytes(e)
(* NIK: Thm above seems vacuous. IsEncryption : (bytes * ...) -> Prop. Which means e:bytes *)

theorem//Name=(Pub SEnc)
  !k,b,e. 
  SKey(k) /\ CanSymEncrypt(k,b) /\ IsEncryption(e,k,b) /\ Bytes(b) 
  => Pub(e)
private theorem//Name=(Bytes SEnc Pub)
  !k,b,e. 
  Pub_k(k) /\ Pub(b) /\ IsEncryption(e,k,b) /\ Bytes(b) => Bytes(e)
theorem//Name=(Pub SEnc Pub)
  !k,b,e. 
  Pub_k(k) /\ Pub(b) /\ IsEncryption(e,k,b) /\ Bytes(b) => Pub(e)

theorem//Name=(Pub SKey)
  !k. SKey(k) /\ (!b. CanSymEncrypt(k,b) => Pub(b)) => Pub_k(k)

(*FALSE, use instead Pub KeySeed. *)
// conjecture//Name=(Pub SKeySeed)
//  !s. KeySeed(s) /\
//    (!k,b. IsDerivedSKey(k,s,b) /\ CanSymEncrypt(k,b) => Pub(b)) => Pub(s)

ask//Name=(SingleUseKey Inj)
  !k,b,b'. SingleUseKey(k,b) /\ SingleUseKey(k,b') => (b = b')
			   
conjecture//Name=(SingleUseKey CanSymEncrypt)
  !k,b. SingleUseKey(k,b) => CanSymEncrypt(k,b)

theorem//Name=(SingleUseKey CanSymEncrypt Inj)
  !k,b,b'. SingleUseKey(k,b) /\ CanSymEncrypt(k,b') => (b = b')

(* Nik: This used to be the problematic one *)
ask !k,b. SingleUseKey(k,b) /\ Pub(b) => Pub_k(k) 

private assume//Name=(Bytes IsDerivedSKey)
  !b1,b2,b. Data.IsDerivedSKey(b,b1,b2) /\ Bytes(b1) /\ Bytes(b2) => Bytes(b)
assume//Name=(Pub IsDerivedSKey)
  !b1,b2,k. Pub(b1) /\ Bytes(b1) /\ Bytes(b2) /\
  Data.IsDerivedSKey(k,b1,b2) => Pub(k)
(*--- SEncInductEnd *)
// (SingleUseKey CanSymEncrypt Inj) breaks support for CanSymEncrypt,
// but is easily proved for protocol that does not directly assume CanSymEncrypt for single use keys.

(*--- SEncThmBegin *)
private theorem//Name=(IsEncryption Invert 1)
  !e,k,b. IsEncryption(e,k,b) /\ Bytes(e) => Bytes(b)

theorem//Name=(IsEncryption Invert 2)
  !e,k,b. IsEncryption(e,k,b) /\ Bytes(e) => 
  (CanSymEncrypt(k,b) /\ SKey(k)) \/ (Pub_k(k) /\ Pub(b))

theorem//Name=(IsEncryption Invert 3)
  !e,k,b. IsEncryption(e,k,b) /\ Pub(e) => 
  (CanSymEncrypt(k,b) /\ SKey(k)) \/ (Pub_k(k) /\ Pub(b))
  
theorem//Name=(IsEncryption SymEncryptVerified)
  !e,k,b. IsEncryption(e,k,b) /\ Bytes(e) =>
  (SymEncryptVerified(k,b) \/ Pub_k(k))

theorem//Name=(Pub SKey Inv)
  !k,b. Pub_k(k) /\ SKey(k) /\ CanSymEncrypt(k,b) => Pub(b)

ask//Name=(Pub IsEncryption)
  !e,k,b. IsEncryption(e,k,b) /\ Bytes(e) /\ Pub(e) /\ Pub_k(k) => Pub(b)
(*--- SEncThmEnd *)
// (Pub IsDerivedKey) is quite pessimistic, since the seed is compromised as soon as the derived key is

(* assume !e,k,b. IsEncryption(e,k,b) /\ Bytes(e) => ((CanSymEncrypt(k,b) /\ SKey(k)) \/ (Pub_k(k) /\ Pub(b))) *)
(* deleted: theorem//Name=(Pub IsDerivedKey)
  !b1,b2,k. Pub(k) /\ Data.IsDerivedSKey(k,b1,b2) => Pub(b1)
*)



(*--- PKeyAPIBegin *)
predicate type pkeypreds =
  | PrivKey of key
  | PubKey of key
  | PubPrivKeyPair of key * key
  | PrivCompKey of key
private val rsa_keygen: unit -> sk:key{ PrivKey(sk) }
private val rsa_pub:
  sk:key{ PrivKey(sk)} -> k:key{PubPrivKeyPair(k,sk) }
private val rsa_keycomp:
  sk:key{  PrivKey(sk) /\
	  (!k,b. PubPrivKeyPair(k,sk) /\ CanAsymEncrypt(k,b) => Pub(b)) /\
	  (!b. SignSays(sk,b))} ->
  unit { PrivCompKey(sk) }
(*--- PKeyAPIEnd *)



(*--- PKeyEqnBegin *)
private definition//Name=(IsPubKey)
  !k,sk. IsPubKey(k,sk) <=>
  (?kb,skb. k = AsymPubKey(kb) /\ sk = AsymPrivKey(skb) /\ IsPK(kb,skb))

private definition//Name=(PrivKey)
  !sk. PrivKey(sk) <=> ?b. sk = AsymPrivKey(b) /\ FreshBytes(b,PKeyName)

private definition//Name=(PrivCompKey)
  !k. PrivCompKey(k) <=> (PrivKey(k) /\ Pub_k(k))

definition//Name=(PubPrivKeyPair)
  !k,sk. PubPrivKeyPair(k,sk) <=> PrivKey(sk) /\ IsPubKey(k,sk)

private definition//Name=(PubKey)
  !k. PubKey(k) <=> ?sk. PubPrivKeyPair(k,sk)
(*--- PKeyEqnEnd *)

(* inductive up to unfolding of definitions *)
(*--- PKeyInductBegin *)
private theorem//Name=(Bytes PubKey)
  !kb. PubKey(AsymPubKey(kb)) => Bytes(kb)

theorem//Name=(Pub PubKey)
  !k. PubKey(k) => Pub_k(k)

theorem//Name=(Pub PrivKey)
!sk. PrivKey(sk) /\
  (!k,b. PubPrivKeyPair(k,sk) /\ CanAsymEncrypt(k,b) => Pub(b)) /\
  (!b. SignSays(sk,b)) => Pub_k(sk)
(*--- PKeyInductEnd *)

(*--- PKeyThmBegin *)
ask//Name=(PubKey PrivKey)
  !k,sk. PubPrivKeyPair(k,sk) => PubKey(k) /\ PrivKey(sk)

theorem//Name=(PrivKey Pub Inv 1)
  !sk,k,b. Pub_k(sk) /\
    PubPrivKeyPair(k,sk) /\ CanAsymEncrypt(k,b) => Pub(b)

theorem//Name=(PrivKey Pub Inv 2)
  !sk,b. Pub_k(sk) /\ PrivKey(sk) => SignSays(sk,b)
(*--- PKeyThmEnd *)

ask//Name=(PubKey Injective)
!k1,k2,sk. PubPrivKeyPair(k1,sk) /\ PubPrivKeyPair(k2,sk) => k1 = k2

ask//Name=(PrivKey Injective)
!k,sk1,sk2. PubPrivKeyPair(k,sk1) /\ PubPrivKeyPair(k,sk2) => sk1 = sk2


(*--- AEncEqnBegin *)
private definition//Name=(IsAsymEncryption)
  !e,k,b. IsAsymEncryption(e,k,b) <=>
  (?kb. k = AsymPubKey(kb) /\  IsAsymEncrypt(e,kb,b))
(*--- AEncEqnEnd *)


ask  !c,ek1,ek2,b1,b2. IsAsymEncryption(c,ek1,b1) /\ IsAsymEncryption(c,ek2,b2) => (ek1=ek2 /\ b1=b2)


(*--- AEncInductBegin *)
private assume//Name=(Bytes AsymEncryption)
  !e,k,b. CanAsymEncrypt(k,b) /\ IsAsymEncryption(e,k,b)
    /\ PubKey(k) /\ Bytes(b) => Bytes(e)

assume//Name=(Pub AsymEncryption)
  !e,k,b. CanAsymEncrypt(k,b) /\ IsAsymEncryption(e,k,b)
    /\ PubKey(k) /\ Bytes(b) => Pub(e)

private assume//Name=(Bytes AsymEncryption Pub)
  !e,k,b. IsAsymEncryption(e,k,b) /\ Pub_k(k) /\ Bytes(b) /\ Pub(b)
  => Bytes(e)

assume//Name=(Pub AsymEncryption Pub)
  !e,k,b. IsAsymEncryption(e,k,b) /\ Pub_k(k) /\ Bytes(b) /\ Pub(b)
  => Pub(e)
(*--- AEncInductEnd *)

(*--- AEncThmBegin *)
private theorem//Name=(AsymEncryption Inv 1)
  !e,k,b. IsAsymEncryption(e,k,b) /\ Bytes(e) => Bytes(b)

theorem//Name=(AsymEncryption Inv 2)
  !e,k,b. IsAsymEncryption(e,k,b) /\ Bytes(e) =>
  ((CanAsymEncrypt(k,b) /\ PubKey(k)) \/ (Pub_k(k) /\ Pub(b)))

theorem//Name=(Pub AsymEncryption Thm)
  !e,k,b,sk. IsAsymEncryption(e,k,b) /\ Bytes(e)
    /\ IsPubKey(k,sk) /\ Pub_k(sk)  /\ Pub(e) => Pub(b)
(*--- AEncThmEnd *)


/// SHA1 hashes

(*--- HashInductBegin *)
private assume//Name=(Bytes IsHash)
 !h,b. Bytes(b) /\ IsHash(h,b) => Bytes(h)
assume//Name=(Pub IsHash)
  !h,b. Pub(b) /\ IsHash(h,b) => Pub(h)
(*--- HashInductEnd *)

(*--- HashAPIBegin *)
val sha1: b:bytes -> h:bytes{IsHash(h,b)}
(*--- HashAPIEnd *)



/// Public-key Signatures

(*--- SigEqnBegin *)
private definition//Name=(IsSignature)
  !s,sk,b. IsSignature(s,sk,b) <=>
    ?kb. sk = AsymPrivKey(kb) /\  IsAsymSign(s,kb,b)
private definition//Name=(SignVerified)
  !sk,b. SignVerified(sk,b) <=>
    Bytes(b) /\ (SignSays(sk,b) \/ (Pub_k(sk) /\ PrivKey(sk)))
(*--- SigEqnEnd *)

(*--- SigInductBegin *)
theorem//Name=(Bytes Pub IsSignature)
  !s,sk,b.
  IsSignature(s,sk,b) /\ PrivKey(sk) /\ SignVerified(sk,b) =>
  Bytes(s) /\ (Pub(b) => Pub(s))
theorem//Name=(Bytes Pub IsSignature Pub)
  !s,sk,b.
  IsSignature(s,sk,b) /\ Pub_k(sk) /\ Pub(b) =>
  (Bytes(b) => Bytes(s)) /\ Pub(s)
(*--- SigInductEnd *)

(*--- SigThmBegin *)
theorem//Name=(IsSignature SignVerified)
  !s,sk,b. IsSignature(s,sk,b) /\ Bytes(s) => SignVerified(sk,b) \/ Pub_k(sk)
(*--- SigThmEnd *)

theorem//Name=(IsSignature SignSays Pub)
  !s,sk,b. IsSignature(s,sk,b) /\ Bytes(s) =>
       (SignSays(sk,b) /\ PrivKey(sk)) \/ (Pub_k(sk) /\ Pub(b))


// consider discarding the final Pub(sk) above.


// Do we have !b.(Pub(b) => Bytes(b)) as a theorem? Could we assume it?



// Derived properties


ask !b. FreshBytes(b,SKeyName) => SKey(SymKey(b))
ask !b,n. FreshBytes(b,SingleUseKeyName(n)) => SKey(SymKey(b))
ask !b1,b2,k.  IsBytes(b1) /\ IsBytes(b2) /\ KeySeed(b1) /\ Bytes(b2) /\ IsDerivedSKey(k,b1,b2) => SKey(k)

(* Nik: Ignoring seals for now. Besides these don't seem provable. *)
(* ask !k. SlKey(k) => (?x. k = SealKey(x)) *)
(* ask !x. SlKey(SealKey(x)) *)

ask !k. PrivKey(k) => (?b. k = AsymPrivKey(b) /\ FreshBytes(b,PKeyName))
ask !b. FreshBytes(b,PKeyName) => PrivKey(AsymPrivKey(b)) (* Nik: removed unnecessary variables k,n *)

ask !k,sk. PubPrivKeyPair(k,sk) => (PrivKey(sk) /\ (?kb,skb. k = AsymPubKey(kb) /\ sk = AsymPrivKey(skb) /\
                                                     IsPK(kb,skb)))
ask !kb,skb. PrivKey(AsymPrivKey(skb)) /\ IsPK(kb,skb) => PubPrivKeyPair(AsymPubKey(kb),AsymPrivKey(skb))
ask !k. PubKey(k) => (?sk. PubPrivKeyPair(k,sk))
ask !k,sk. PubPrivKeyPair(k,sk) => PubKey(k)

ask !m,k,b. IsMAC(m,k,b) => (?kb. k = SymKey(kb) /\ Data.IsMAC(m,kb,b))
ask !m,kb,b. Data.IsMAC(m,kb,b) => IsMAC(m,SymKey(kb),b)

ask !e,k,b. IsEncryption(e,k,b) => (?kb. k = SymKey(kb) /\  IsSymEncrypt(e,kb,b))
ask !e,kb,b. IsSymEncrypt(e,kb,b) => IsEncryption(e,SymKey(kb),b)


(* ask !e,k,b. IsSealEncryption(e,k,b) => *)
(*   (?x,n,l,rl. k = SealKey(x) /\ *)
(*       x = (n,l,rl) /\ *)
(*       Table(n,b,e)) *)

(* ask !x,n,l,rl,e,b. *)
(*       x = (n,l,rl) /\ *)
(*       Table(n,b,e) => IsSealEncryption(e,SealKey(x),b) *)

ask !s,k,b. IsSignature(s,k,b) => (?kb. k = AsymPrivKey(kb) /\  IsAsymSign(s,kb,b))
ask !s,kb,b. IsAsymSign(s,kb,b) => IsSignature(s,AsymPrivKey(kb),b)

ask !e,k,b. IsAsymEncryption(e,k,b) => (?kb. k = AsymPubKey(kb) /\  IsAsymEncrypt(e,kb,b))
ask !s,kb,b. IsAsymEncrypt(s,kb,b) => IsAsymEncryption(s,AsymPubKey(kb),b)


// auxiliary functions to implement MACs symbolically

val mac:
  k:bytes ->
  b:bytes {(MKey(SymKey(k)) /\ MACSays(SymKey(k),b)) \/
	     (Pub_k(SymKey(k)) /\ Pub(b))} ->
  h:bytes {IsMAC(h,SymKey(k),b)}
val macVerify:
  k:bytes {MKey(SymKey(k)) \/ Pub_k(SymKey(k))} ->
  b:bytes ->
  h:bytes ->
  unit {IsMAC(h,SymKey(k),b)}

private val hmac_keycomp:
  k:key { MKey(k) /\ (!b. MACSays(k,b)) } -> unit { MCompKey(k) }
(*--- MACAPIBegin *)
val hmac_keygen: unit -> k:key{MKey(k)}
val hmacsha1:
  k:key ->
  b:bytes{ (MKey(k) /\ MACSays(k,b)) \/ (Pub_k(k) /\ Pub(b)) } ->
  h:bytes{ IsMAC(h,k,b) /\ (Pub(b) => Pub(h)) }
val hmacsha1Verify:
  k:key{MKey(k) \/ Pub_k(k)} -> b:bytes -> h:bytes -> unit{IsMAC(h,k,b)}
(*--- MACAPIEnd *)

(* Added the following to hide the implementation of IsDerivedKey *)
(* Nik: needed to add Bytes(b1) *)
(*
ask//Name=(Pub IsDerivedKey)
  !b1,b2,k. IsBytes(b1) /\ IsBytes(b2) /\ Pub(b1) /\ Bytes(b1) /\ Bytes(b2) /\ IsDerivedKey(k,b1,b2)
    => Pub_k(k)
*)

(*--- PSHA1APIBegin *)
val hmac_keyseed: unit -> b:bytes{KeySeed(b)}
val psha1:
  b1:bytes{KeySeed(b1) \/ Pub(b1)} ->
  b2:bytes ->
  k:key{IsDerivedKey(k,b1,b2)}
(*--- PSHA1APIEnd *)

val sym_encrypt: k:bytes ->
  p:bytes{(SKey(SymKey(k)) /\ CanSymEncrypt(SymKey(k),p)) \/ (Pub_k(SymKey(k)) /\ Pub(p))} ->
  e:bytes {IsEncryption(e,SymKey(k),p)}
val sym_decrypt:
  k:bytes {SKey(SymKey(k)) \/ Pub_k(SymKey(k))} ->
  e:bytes ->
  b:bytes {
    IsEncryption(e,SymKey(k),b) /\
    (!p. IsEncryption(e,SymKey(k),p) => b=p) /\
    (Pub(k) => Pub(b))}
//09-06-25 the first postcondition yields authentication.

(*--- SEncAPIBegin *)
private val aes_keygen: unit -> k:key{SKey(k)}
val aes_encrypt: (* AES CBC *)
  k:key ->
  b:bytes{(SKey(k) /\ CanSymEncrypt(k,b)) \/ (Pub_k(k) /\ Pub(b))} ->
  e:bytes{IsEncryption(e,k,b)}
val aes_decrypt: (* AES CBC *)
  k:key{SKey(k) \/ Pub_k(k)} -> e:bytes ->
  b:bytes{(!p. IsEncryption(e,k,p) => b = p) /\ (Pub_k(k) => Pub(b))}
(*--- SEncAPIEnd *)

(*--- SEncAPIMoreBegin *)
private val aes_keycomp:
  k:key{ SKey(k)  /\ (!b. CanSymEncrypt(k,b) => Pub(b)) } ->
  unit{ SCompKey(k) }
private val aes_keyseed: unit -> b:bytes{KeySeed(b)}
private val aes_keygen_single: b:bytes -> k:key{SingleUseKey(k,b)}
val psha1_aes:
  b1:bytes{KeySeed(b1) \/ Pub(b1)} ->
  b2:bytes ->
  k:key{IsDerivedSKey(k,b1,b2)}

val aes_ccm_encrypt:
  k:key ->
  b:bytes{(SKey(k) /\ CanSymEncrypt(k,b)) \/ (Pub_k(k) /\ Pub(b))} ->
  e:bytes{IsEncryption(e,k,b)}
val aes_ccm_decrypt:
  k:key{SKey(k) \/ Pub_k(k)} ->
  e:bytes ->
  b:bytes{IsEncryption(e,k,b) /\ (Pub_k(k) => Pub(b))}
(*--- SEncAPIMoreEnd *)
(* CF 09-06-25 *)
// val aes_malleate:
////  f:(b:bytes -> b':bytes { !k,e. IsEncryption(e,SymKey(k),b) => Bytes(k) /\ CanSymEncrypt(k,b') }) ->
//  f:(b:bytes -> b':bytes { !k. CanSymEncrypt(k,b') }) ->
//  e1:bytes{ Pub(e1) } ->
//  e2:bytes{ Pub(e2) }


(*--- AEncAPIBegin *)
val rsa_encrypt: k:key ->
  p:bytes{(PubKey(k) /\ CanAsymEncrypt(k,p)) \/ (Pub_k(k) /\ Pub(p))} ->
  c:bytes{IsAsymEncryption(c,k,p)}

val rsa_decrypt: sk:key ->
  c:bytes{PrivKey(sk) \/ (Pub(c) /\ Pub_k(sk))} -> d:bytes
  {(!k,x. PubPrivKeyPair(k,sk) /\ IsAsymEncryption(c,k,x) => d = x)
   /\ (Pub(c) /\ Pub_k(sk) => Pub(d))}

val rsa_encrypt_oaep: k:key ->
  p:bytes{(PubKey(k) /\ CanAsymEncrypt(k,p)) \/ (Pub_k(k) /\ Pub(p))} ->
  c:bytes{IsAsymEncryption(c,k,p)}

val rsa_decrypt_oaep: sk:key ->
  c:bytes{PrivKey(sk) \/ (Pub(c) /\ Pub_k(sk))} -> d:bytes
  {(!pk. PubPrivKeyPair(pk,sk) => IsAsymEncryption(c,pk,d))
   /\ (Pub(c) /\ Pub_k(sk) => Pub(d))}
(*--- AEncAPIEnd *)


(* Seal versions *)
val fail: unit -> 'a

(* NIK: Skipping seal versions. IsSealEncryption seems to be ill-typed *)
(* (\*--- SealEncAPIBegin *\) *)
(* private val aes_keygen_seal: unit -> k:key{SlKey(k)} *)
(* val aes_encrypt_seal: k:key -> x:bytes{(SlKey(k) /\ CanSymEncrypt(k,x)) \/ (Pub_k(k) /\ Pub(x))} -> e:bytes{IsSealEncryption(k,e,x)} (\* NIK: re-ordered arguments *\) *)
(* val aes_decrypt_seal: k:key{SlKey(k) \/ Pub_k(k)} -> e:bytes -> x:bytes{IsSealEncryption(k,e,x)} (\* NIK: re-ordered arguments *\) *)
(* (\*--- SealEncAPIEnd *\) *)
(* // the more general postcondition !p. IsSealEncryption(e,k,x) => x = p does not hold *)
(* // without changing the prim-crypto interface *)

val asym_sign:
  k:bytes ->
  w:bytes {(PrivKey(AsymPrivKey(k)) /\ SignSays(AsymPrivKey(k),w)) \/
	     (Pub_k(AsymPrivKey(k)) /\ Pub(w))} ->
  s:bytes { IsSignature(s,AsymPrivKey(k),w) }
val asym_signature_verify:
  k:bytes{PubKey(AsymPubKey(k)) \/ Pub_k(AsymPubKey(k))} ->
  w:bytes -> s:bytes ->
  unit {!sk. PubPrivKeyPair(AsymPubKey(k),sk) => IsSignature(s,sk,w)}

(*--- SigAPIBegin *)
val rsa_sign:
  sk:key -> b:bytes
  {(PrivKey(sk) /\ SignSays(sk,b)) \/ (Pub_k(sk) /\ Pub(b))} ->
  s:bytes{IsSignature(s,sk,b)}
val rsa_verify:
  vk:key{PubKey(vk) \/ Pub_k(vk)} -> w:bytes -> s:bytes ->
  unit {!sk. PubPrivKeyPair(vk,sk) => IsSignature(s,sk,w)}
(*--- SigAPIEnd *)


private val keytobytes: k:key -> b:bytes{(k = SymKey(b)) \/ (k = AsymPrivKey(b)) \/ (k = AsymPubKey(b))}
private val symkey: b:bytes -> k:key{k=SymKey(b)}

private val symkeytobytes: k:key -> b:bytes{k = SymKey(b)}

private val mkKey: unit -> bytes
private val mkKey256: unit -> bytes
private val mkPassword: unit -> str

(*--- FreshAPIBegin *)
val freshbytes : u:usage -> string -> b:bytes{FreshBytes(b,u)}
(*--- FreshAPIEnd *)

predicate type pad =
  | Padded of bytes*bytes

theorem//Name=(Padded)
!x, y. Padded(x, y) <=> y=Concat(Utf8(Literal("pad")), x)

theorem//Name=(Pub Padded)
!x,y. Pub(x) /\ Padded(x, y) => Pub(y)

theorem//Name=(Pub Padded Inv)
!x,y. Padded(x, y) /\ Pub(y) => Pub(x)

val pad:x:bytes-> xp:bytes{Padded(x, xp)}
val unpad:xp:bytes -> x:bytes{Padded(x, xp)}

private val asympubkey: b:bytes -> k:key{k = AsymPubKey(b)}
private val asymprivkey: b:bytes -> k:key{k = AsymPrivKey(b)}
private val asympub: str -> key
private val asympriv: str -> key

private val guid:unit -> str
private val time: unit -> str * str
private val kgen: unit -> k:key{SKey(k)}

(* cited in the paper *)

(*--- CorollariesBegin *)
ask//Name=(C1. By expanding the definition of IsMAC)
!h,k,b. IsMAC(h,k,b) /\ Bytes(h) => (MKey(k) => MACSays(k,b)) \/ Pub_k(k)
ask//Name=(C2. MAC keys are public iff they may be used with any logical payload)
!k. MKey(k) => (Pub_k(k) <=> !m. MACSays(k,m))
(*--- CorollariesEnd *)
ask//Name=(C2. MAC keys are public iff they have been leaked by hmac_keycomp)
!k. MKey(k) => (Pub_k(k) <=> MCompKey(k))

(** seals are ignored for now *)
(** NIK: Skipping seals. Table seems to be untypable *)
(* (\*--- SealEncEqnBegin *\) *)
(* conjecture !k. SlKey(k) <=> (?x. k = SealKey(x)) *)
(* conjecture !e,k,b. IsSealEncryption(e,k,b) <=> *)
(*   (?x,n,l,rl. k = SealKey(x) /\ *)
(*       x = (n,l,rl) /\ *)
(*       Table(n,b,e)) *)
(* (\*--- SealEncEqnEnd *\) *)

(* (\*--- SealEncInductBegin *\) *)
(* conjecture !k,b,e.  *)
(*   SlKey(k) /\ Bytes(b) /\ CanSymEncrypt(k,b) /\ *)
(*   IsSealEncryption(e,k,b) => Bytes(e) *)
(* conjecture !k,b,e.  *)
(*   Pub_k(k) /\ Bytes(b) /\ Pub(b) /\ *)
(*   IsSealEncryption(e,k,b) => Bytes(e) *)
(* conjecture !k,b,e.  *)
(*   SlKey(k) /\ Bytes(b) /\ CanSymEncrypt(k,b) /\ *)
(*   IsSealEncryption(e,k,b) => Pub(e) *)
(* conjecture !k,b,e.  *)
(*   Pub_k(k) /\ Bytes(b) /\ Pub(b) /\ *)
(*   IsSealEncryption(e,k,b) => Pub(e) *)
(* (\*--- SealEncInductEnd *\) *)

(* (\*--- SealEncThmBegin *\) *)
(* conjecture !k,w,e. IsSealEncryption(k,w,e) /\ Bytes(e) => Bytes(w) *)
(* conjecture !k,b,e.  *)
(*   Pub_k(k) /\ Bytes(e) /\ Pub(e) /\ *)
(*   IsSealEncryption(e,k,b) => Pub(b) *)
(* (\*--- SealEncThmEnd *\) *)
