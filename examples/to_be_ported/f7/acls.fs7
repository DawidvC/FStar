(*
   Copyright 2008-2014 Nikhil Swamy and Microsoft Research

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*)
module Acls
open Pi
open Db

(*--- factsBegin *)
type facts =
  | CanRead of string // $\mbox{read access}$
  | CanWrite of string // $\mbox{write access}$
  | PublicFile of string // $\mbox{some file attribute}$
(*--- factsEnd *)

// global policy "writable files are also readable"
(*--- policyBegin *)
assume !x. CanWrite(x) => CanRead(x)
(*--- policyEnd *)

// two dangerous primitives
(*--- primBegin *)
val read: file:string{CanRead(file)} -> string
val delete: file:string{CanWrite(file)} -> unit
(*--- primEnd *)

// sample dynamic validation function
// global policy "all files in the public directory are readable"
(*--- pfnBegin *)
val publicfile: file : string ->  unit{ PublicFile(file) }
assume !x. PublicFile(x) => CanRead(x)
(*--- pfnEnd *)

// some higher-order code
val rc: file:string{CanRead(file)} -> unit -> string  

// using dynamic ACLs in some database
(*--- dbBegin *)
type entry = 
  | Readable of x:string{CanRead(x)}
  | Writable of x:string{CanWrite(x)}
  | Nothing
val acls : (string,entry) Db_t
val safe_read: string -> string
val readable: file:string -> unit{ CanRead(file) }
(*--- dbEnd *)

// concat
type t = file:string{ CanRead(file) }
val fold_left: ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a 
val append: string -> t -> string

(*--- mergeBegin *)
val merge: (file:string{ CanRead(file) }) list -> string
(*--- mergeEnd *)
