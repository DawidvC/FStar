(*
   Copyright 2008-2014 Nikhil Swamy and Microsoft Research

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*)
(*****************************)
(* Generated Seven Interface *)
(*****************************)
module Commit_protocol
open Data
open Principals
open Crypto
open Sessions
public type vars = {
  c : principal ;
  w : principal ;
  q : int } 
public type hashes = {
  hc : bytes ;
  hw : bytes ;
  hq : bytes }
public type macs = {
  wCommitcwq : bytes ;
  c_Acknowledge : bytes ;
  wReveal : bytes }
public type keys = {
  key_cw : bytes ;
  key_wc : bytes }
public type header = {
  ts : int ;
  sid : bytes }
public type store = 
  { vars : vars ; hashes : hashes ; macs : macs ; keys : keys ; header : header}
val empty_store_c : principal -> bool -> store
val empty_store_w : principal -> bool -> store


(* Wired types *)

public type wired_w_start =
  | Wired_in_w_start_of_c_cwqCommit_cwq__ of ((principal * principal) * store)
public type wired_c_cwqCommit =
  | Wired_in_c_cwqCommit_of_w_cwqCommit_Ack___ of ((unit) * store)
public type wired_w_cwqCommit_Ack =
  | Wired_in_w_cwqCommit_Ack_of_c_cwqAck_Reveal___ of ((int) * store)


(* Events and predicates declaration *)

public type preds = 

| Leak of principal

| Send_Commit of (principal * bytes * int * c:principal * w:principal * q:int)
| Send_Ack of (principal * bytes * int )
| Send_Reveal of (principal * bytes * int )
| Recv_Commit of (principal * bytes * int * c:principal * w:principal)
| Recv_Ack of (principal * bytes * int )
| Recv_Reveal of (principal * bytes * int * q:int)

| P_start of store
| P_Commit of store
| P_Ack of store
| P_Reveal of store

| P'_start of store
| P'_Commit of store
| P'_Ack of store
| P'_Reveal of store

| Q_c_cwqAck_Reveal of store
| Q_w_start of store
| Q_c_cwqCommit of store
| Q_w_cwqCommit_Ack of store

| Q'_c_start of store
| Q'_w_cwqCommit of store
| Q'_c_cwqCommit_Ack of store
| Q'_w_cwqAck_Reveal of store

| Q''_c_start of store
| Q''_w_cwqCommit of store
| Q''_c_cwqCommit_Ack of store
| Q''_w_cwqAck_Reveal of store



assume "c_cwqCommit" <> "w_cwqCommit_Ack"
assume "c_cwqCommit" <> "c_cwqAck_Reveal"
assume "w_cwqCommit_Ack" <> "c_cwqAck_Reveal"


val session : bytes

assume (!sp:principal,rp:principal,c:bytes. ((?store:store. (store.vars.c=sp) /\ (store.vars.w=rp) /\
  (c = Concat(Concat(store.header.sid,Utf8(Literal(SofI(store.header.ts)))),Concat(Utf8(Literal ("c_cwqCommit")),Concat(store.hashes.hc,Concat(store.hashes.hw,Concat(store.hashes.hq,Utf8(Literal ("")))))))) /\
  (Q_c_cwqCommit(store) \/ Leak(sp)))
  \/ (?store. (store.vars.w=sp) /\ (store.vars.c=rp) /\
  (c = Concat(Concat(store.header.sid,Utf8(Literal(SofI(store.header.ts)))),Concat(Utf8(Literal ("w_cwqCommit_Ack")),Utf8(Literal (""))))) /\
  (Q_w_cwqCommit_Ack(store) \/ Leak(sp)))
  \/ (?store. (store.vars.c=sp) /\ (store.vars.w=rp) /\
  (c = Concat(Concat(store.header.sid,Utf8(Literal(SofI(store.header.ts)))),Concat(Utf8(Literal ("c_cwqAck_Reveal")),Utf8(Literal (""))))) /\
  (Q_c_cwqAck_Reveal(store) \/ Leak(sp)))))
(* assume !store. Q_w_start(store) *)

(* assume !store. Q_c_cwqCommit(store) => ( *)
(*   (store.hashes.hc = Hash(Utf8(Literal(store.vars.c)))) /\ *)
(*   (store.hashes.hw = Hash(Utf8(Literal(store.vars.w)))) /\ *)
(*   (store.hashes.hq = Hash(Utf8(Literal(SofI(store.vars.q)))))) *)

(* assume !store. Q_w_cwqCommit_Ack(store) => ( *)
(*   (store.hashes.hc = Hash(Utf8(Literal(store.vars.c)))) /\ *)
(*   (store.hashes.hw = Hash(Utf8(Literal(store.vars.w))))) *)

(* assume !store. Q_c_cwqAck_Reveal(store) => ( *)
(*   (store.hashes.hc = Hash(Utf8(Literal(store.vars.c)))) /\ *)
(*   (store.hashes.hw = Hash(Utf8(Literal(store.vars.w)))) /\ *)
(*   (store.hashes.hq = Hash(Utf8(Literal(SofI(store.vars.q)))))) *)

(* assume !store,store',c,w,q. (Send_Commit(c,store.header.sid,store.header.ts,c,w,q) /\  *)
(*    (store.vars.c = c) /\  *)
(*    (store.vars.w = w) /\  *)
(*    (store.vars.q = q) /\  *)
(*    (store.hashes.hc = Hash(Utf8(Literal(c)))) /\  *)
(*    (store.hashes.hw = Hash(Utf8(Literal(w)))) /\  *)
(*    (store.hashes.hq = Hash(Utf8(Literal(SofI(q))))) /\  *)
(*    Q'_c_start(store'))  *)
(*   => Q_c_cwqCommit(store) *)


(* assume !store,store',w. (Send_Ack(w,store.header.sid,store.header.ts) /\  *)
(*    (store.vars.w = w) /\  *)
(*    (store.hashes.hw = Hash(Utf8(Literal(w)))) /\  *)
(*    (store.hashes.hc = Hash(Utf8(Literal(store.vars.c)))) /\ *)
(*    (store.hashes.hw = Hash(Utf8(Literal(store.vars.w)))) /\ *)
(*    (store'.header.sid = store.header.sid) /\ *)
(*    (store'.hashes.hc = store.hashes.hc) /\ *)
(*    (store'.hashes.hw = store.hashes.hw) /\ *)
(*    (store'.hashes.hq = store.hashes.hq) /\ *)
(*    Q'_w_cwqCommit(store'))  *)
(*   => Q_w_cwqCommit_Ack(store) *)


(* assume !store,store',c. (Send_Reveal(c,store.header.sid,store.header.ts) /\  *)
(*    (store.vars.c = c) /\  *)
(*    (store.hashes.hc = Hash(Utf8(Literal(c)))) /\  *)
(*    (store.hashes.hc = Hash(Utf8(Literal(store.vars.c)))) /\ *)
(*    (store.hashes.hw = Hash(Utf8(Literal(store.vars.w)))) /\ *)
(*    (store.hashes.hq = Hash(Utf8(Literal(SofI(store.vars.q))))) /\ *)
(*    (store'.header.sid = store.header.sid) /\ *)
(*    (store'.hashes.hc = store.hashes.hc) /\ *)
(*    (store'.hashes.hw = store.hashes.hw) /\ *)
(*    (store'.hashes.hq = store.hashes.hq) /\ *)
(*    Q'_c_cwqCommit_Ack(store'))  *)
(*   => Q_c_cwqAck_Reveal(store) *)


(* assume !store. Q'_c_start(store) *)

(* assume !store. Q'_w_cwqCommit(store) => ( *)
(*   (store.hashes.hc = Hash(Utf8(Literal(store.vars.c)))) /\ *)
(*   (store.hashes.hw = Hash(Utf8(Literal(store.vars.w))))) *)

(* assume !store. Q'_c_cwqCommit_Ack(store) => ( *)
(*   (store.hashes.hc = Hash(Utf8(Literal(store.vars.c)))) /\ *)
(*   (store.hashes.hw = Hash(Utf8(Literal(store.vars.w)))) /\ *)
(*   (store.hashes.hq = Hash(Utf8(Literal(SofI(store.vars.q)))))) *)

(* assume !store. Q'_w_cwqAck_Reveal(store) => ( *)
(*   (store.hashes.hq = Hash(Utf8(Literal(SofI(store.vars.q))))) /\ *)
(*   (store.hashes.hc = Hash(Utf8(Literal(store.vars.c)))) /\ *)
(*   (store.hashes.hw = Hash(Utf8(Literal(store.vars.w))))) *)


(* assume !store.!store1.!store0. ( *)
(*   (store.hashes.hc = Hash(Utf8(Literal(store.vars.c)))) /\ *)
(*   (store.hashes.hw = Hash(Utf8(Literal(store.vars.w)))) /\ *)
(*   (Q_w_start(store0) ) /\ *)
(*   (store1.header.sid = store.header.sid) /\ *)
(*   (store1.hashes.hc = store.hashes.hc) /\ *)
(*   (store1.hashes.hw = store.hashes.hw) /\ *)
(*   (store1.hashes.hq = store.hashes.hq) /\ *)
(*   (store1.vars.c = store.vars.c) /\ *)
(*   (Q_c_cwqCommit(store1) \/ Leak(store1.vars.c))) *)
(*   => Q''_w_cwqCommit(store) *)

(* assume !store. (Recv_Commit(store.vars.w,store.header.sid,store.header.ts,store.vars.c,store.vars.w) /\ *)
(*    Q''_w_cwqCommit(store)) *)
(*    => Q'_w_cwqCommit(store) *)

(* assume !store.!store1.!store0. ( *)
(*   (store0.header.sid = store.header.sid) /\ *)
(*   (store.hashes.hc = Hash(Utf8(Literal(store.vars.c)))) /\  *)
(*   (store.hashes.hc = Hash(Utf8(Literal(store.vars.c)))) /\ *)
(*   (store.hashes.hw = Hash(Utf8(Literal(store.vars.w)))) /\ *)
(*   (store.hashes.hq = Hash(Utf8(Literal(SofI(store.vars.q))))) /\ *)
(*   (store0.hashes.hc = store.hashes.hc) /\ *)
(*   (store0.hashes.hw = store.hashes.hw) /\ *)
(*   (store0.hashes.hq = store.hashes.hq) /\ *)
(*   (Q_c_cwqCommit(store0) ) /\ *)
(*   (store1.header.sid = store.header.sid) /\ *)
(*   (\*(store1.hashes.hc = store.hashes.hc) /\ *\) *)
(*   (\*(store1.hashes.hw = store.hashes.hw) /\ *\) *)
(*   (\*(store1.hashes.hq = store.hashes.hq) /\ *\) *)
(*   (store1.vars.w = store.vars.w) /\ *)
(*   (Q_w_cwqCommit_Ack(store1) \/ Leak(store1.vars.w))) *)
(*   => Q''_c_cwqCommit_Ack(store) *)

(* assume !store. (Recv_Ack(store.vars.c,store.header.sid,store.header.ts) /\ *)
(*    Q''_c_cwqCommit_Ack(store)) *)
(*    => Q'_c_cwqCommit_Ack(store) *)

(* assume !store.!store1.!store0. ( *)
(*   (store0.header.sid = store.header.sid) /\ *)
(*   (store.hashes.hw = Hash(Utf8(Literal(store.vars.w)))) /\  *)
(*   (store.hashes.hq = Hash(Utf8(Literal(SofI(store.vars.q))))) /\ *)
(*   (store.hashes.hc = Hash(Utf8(Literal(store.vars.c)))) /\ *)
(*   (store.hashes.hw = Hash(Utf8(Literal(store.vars.w)))) /\ *)
(*   (store0.hashes.hc = store.hashes.hc) /\ *)
(*   (store0.hashes.hw = store.hashes.hw) /\ *)
(*   (store0.hashes.hq = store.hashes.hq) /\ *)
(*   (Q_w_cwqCommit_Ack(store0) ) /\ *)
(*   (store1.header.sid = store.header.sid) /\ *)
(*   (\*(store1.hashes.hc = store.hashes.hc) /\ *\) *)
(*   (\*(store1.hashes.hw = store.hashes.hw) /\ *\) *)
(*   (\*(store1.hashes.hq = store.hashes.hq) /\ *\) *)
(*   (store1.vars.c = store.vars.c) /\ *)
(*   (Q_c_cwqAck_Reveal(store1) \/ Leak(store1.vars.c))) *)
(*   => Q''_w_cwqAck_Reveal(store) *)

(* assume !store. (Recv_Reveal(store.vars.w,store.header.sid,store.header.ts,store.vars.q) /\ *)
(*    Q''_w_cwqAck_Reveal(store)) *)
(*    => Q'_w_cwqAck_Reveal(store) *)

(* private val content_c_cwqCommit_cwq :  *)
(*   (ts:int) ->  *)
(*   (store:store) ->  *)
(*   (c:bytes) {  *)
(*   c = Concat(Concat(store.header.sid,Utf8(Literal(SofI(ts)))),Concat(Utf8(Literal ("c_cwqCommit")),Concat(store.hashes.hc,Concat(store.hashes.hw,Concat(store.hashes.hq,Utf8(Literal ("")))))))} *)

(* private val content_w_cwqCommit_Ack_ :  *)
(*   (ts:int) ->  *)
(*   (store:store) ->  *)
(*   (c:bytes) {  *)
(*   c = Concat(Concat(store.header.sid,Utf8(Literal(SofI(ts)))),Concat(Utf8(Literal ("w_cwqCommit_Ack")),Utf8(Literal (""))))} *)

(* private val content_c_cwqAck_Reveal_ :  *)
(*   (ts:int) ->  *)
(*   (store:store) ->  *)
(*   (c:bytes) {  *)
(*   c = Concat(Concat(store.header.sid,Utf8(Literal(SofI(ts)))),Concat(Utf8(Literal ("c_cwqAck_Reveal")),Utf8(Literal (""))))} *)

(* private val mac_verify_w_c_cwqCommit_cwq :  *)
(*   (ts:int) ->  *)
(*   (store:store) ->  *)
(*   (k:key){MACKey(session,store.vars.c,store.vars.w,k)} ->  *)
(*   (m:bytes) ->  *)
(*   (c':bytes) {  *)
(*    ?store0.  (store0.header.sid = store.header.sid) /\ *)
(*    (store0.hashes.hc = store.hashes.hc) /\ *)
(*    (store0.hashes.hw = store.hashes.hw) /\ *)
(*    (store0.hashes.hq = store.hashes.hq) /\ *)
(*    (store0.vars.c = store.vars.c) /\ *)
(*   (Q_c_cwqCommit(store0) \/ Leak(store0.vars.c))} *)

(* private val mac_verify_c_w_cwqCommit_Ack_ :  *)
(*   (ts:int) ->  *)
(*   (store:store) ->  *)
(*   (k:key){MACKey(session,store.vars.w,store.vars.c,k)} ->  *)
(*   (m:bytes) ->  *)
(*   (c':bytes) {  *)
(*    ?store0.  (store0.header.sid = store.header.sid) /\ *)
(*    (store0.vars.w = store.vars.w) /\ *)
(*   (Q_w_cwqCommit_Ack(store0) \/ Leak(store0.vars.w))} *)

(* private val mac_verify_w_c_cwqAck_Reveal_ :  *)
(*   (ts:int) ->  *)
(*   (store:store) ->  *)
(*   (k:key){MACKey(session,store.vars.c,store.vars.w,k)} ->  *)
(*   (m:bytes) ->  *)
(*   (c':bytes) {  *)
(*    ?store0.  (store0.header.sid = store.header.sid) /\ *)
(*    (store0.vars.c = store.vars.c) /\ *)
(*   (Q_c_cwqAck_Reveal(store0) \/ Leak(store0.vars.c))} *)

(* private val receiveWired_w_start: *)
(*   store:store{Q_w_start(store)} -> *)
(*   wired_msg:wired_w_start{ *)
(*   (?store'. ?tuple,c,w. wired_msg = Wired_in_w_start_of_c_cwqCommit_cwq__(tuple,store')  *)
(*     /\ tuple = (c,w) *)
(*     /\ store'.vars.c = c *)
(*     /\ store'.vars.w = w *)
(*     /\ store'.hashes.hc = Hash(Utf8(Literal(c))) *)
(*     /\ store'.hashes.hw = Hash(Utf8(Literal(w))) *)
(*   (\*/\ (?q. store.hashes.hq = Hash(Utf8(q))) *\)  *)
(*     /\ (Q''_w_cwqCommit(store')))} *)

(* private val receiveWired_c_cwqCommit: *)
(*   store:store{Q_c_cwqCommit(store)} -> *)
(*   wired_msg:wired_c_cwqCommit{ *)
(*   (?store'. ?tuple. wired_msg = Wired_in_c_cwqCommit_of_w_cwqCommit_Ack___(tuple,store')  *)
(*     /\ tuple = () *)
(*     /\ store'.hashes.hc = store.hashes.hc *)
(*     /\ store'.hashes.hw = store.hashes.hw *)
(*     /\ store'.hashes.hq = store.hashes.hq *)
(*     /\ store'.header.sid = store.header.sid *)
(*     /\ (Q''_c_cwqCommit_Ack(store')))} *)

(* private val receiveWired_w_cwqCommit_Ack: *)
(*   store:store{Q_w_cwqCommit_Ack(store)} -> *)
(*   wired_msg:wired_w_cwqCommit_Ack{ *)
(*   (?store'. ?tuple,q. wired_msg = Wired_in_w_cwqCommit_Ack_of_c_cwqAck_Reveal___(tuple,store')  *)
(*     /\ tuple = q *)
(*     /\ store'.vars.q = q *)
(*     /\ store'.hashes.hq = Hash(Utf8(Literal(SofI(q)))) *)
(*     /\ store'.hashes.hc = store.hashes.hc *)
(*     /\ store'.hashes.hw = store.hashes.hw *)
(*     /\ store'.header.sid = store.header.sid *)
(*     /\ (Q''_w_cwqAck_Reveal(store')))} *)

(* private val sendWired_Commit_c_start: *)
(*   c:principal -> w:principal -> q:int ->   *)
(*   store:store {Q'_c_start(store) *)
(*        /\ Send_Commit(c,store.header.sid,Succ(store.header.ts),c,w,q)} -> *)
(*   store':store {Q_c_cwqCommit(store')  *)
(*     /\ store'.vars.c = c *)
(*     /\ store'.vars.w = w *)
(*     /\ store'.vars.q = q *)
(*     /\ store'.hashes.hc = Hash(Utf8(Literal(c))) *)
(*     /\ store'.hashes.hw = Hash(Utf8(Literal(w))) *)
(*     /\ store'.hashes.hq = Hash(Utf8(Literal(SofI(q))))  *)
(*     /\ store'.header.sid = store.header.sid} *)

(* private val sendWired_Ack_w_cwqCommit: *)
   
(*   store:store {Q'_w_cwqCommit(store) *)
(*        /\ Send_Ack(store.vars.w,store.header.sid,Succ(store.header.ts))} -> *)
(*   store':store {Q_w_cwqCommit_Ack(store')   *)
(*     /\ store'.vars.c = store.vars.c *)
(*     /\ store'.vars.w = store.vars.w *)
(*     /\ store'.vars.q = store.vars.q *)
(*     /\ store'.header.sid = store.header.sid} *)

(* private val sendWired_Reveal_c_cwqCommit_Ack: *)
   
(*   store:store {Q'_c_cwqCommit_Ack(store) *)
(*        /\ Send_Reveal(store.vars.c,store.header.sid,Succ(store.header.ts))} -> *)
(*   store':store {Q_c_cwqAck_Reveal(store')   *)
(*     /\ store'.vars.c = store.vars.c *)
(*     /\ store'.vars.w = store.vars.w *)
(*     /\ store'.vars.q = store.vars.q *)
(*     /\ store'.header.sid = store.header.sid} *)
