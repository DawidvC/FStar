module Marshall
(* first type parameter on Wire can be left implicit *)
type Wire :: 'a::* => 'a => bytes => E

val pickle: x:'a -> option (b:bytes{Wire x b})
val unpickle: b:bytes -> option (x:'a{Wire x b})

assume forall (x1:'a) (x2:'a) (b:bytes). Wire x1 b && Wire x2 b => x1=x2
end

(* ---------------------------------------------------------------------- *)

module Crypto
open Marshall

type dsig
type prin
type Says :: prin => E => E
type sk :: prin => 'a::* => ('a => E) => *
type pk :: prin => 'a::* => ('a => E) => *

val rsa_sign: 'a::*
           -> 'b::('a => E)
           -> p:prin 
           -> sk p 'a 'b 
           -> x:'a 
           -> b:bytes{Wire x b && 'b x} 
           -> dsig

val rsa_verify: 'a::*
             -> 'b::('a => E)
             -> p:prin
             -> pk p 'a 'b
             -> x:'a
             -> b:bytes{Wire x b}
             -> d:dsig
             -> r:bool{r=true => Says p ('b x)}

val rsa_keygen: 'a::*
             -> 'b::('a => E)
             -> p:prin 
             -> (pk p 'a 'b * sk p 'a 'b)
end

(* ---------------------------------------------------------------------- *)

module ExperimentDB
open Marshall
open Crypto

type ing = {reagent:string; quantity:int}
type expsetup = list ing
type Valid :: expsetup => E

(* A custom proof kernel *)
type pf :: E => bool => P =
 | T : pf True true

 | AndElim1 : 'a::E
           -> 'b::E 
           -> c:bool 
           -> pf (l_and 'a 'b) c
           -> pf 'a c

 | AndElim2 : 'a::E 
           -> 'b::E 
           -> c:bool 
           -> pf (l_and 'a 'b) c
           -> pf 'b c

 | AndIntro: 'a::E
          -> 'b::E 
          -> c1:bool 
          -> c2:bool 
          -> pf 'a c1 
          -> pf 'b c2 
          -> pf (l_and 'a 'b) (c1 && c2)

 | OrIntro: 'a::E
         -> 'b::E 
         -> c1:bool 
         -> pf 'a c1 
         -> pf (l_or 'a 'b) c1

 | OrElim:  'a::E 
         -> 'b::E 
         -> 'c::E 
         -> c1:bool
         -> c2:bool
         -> c3:bool
         -> pf (l_or 'a 'b) c1
         -> pf (l_implies 'a 'c) c2 
         -> pf (l_implies 'b 'c) c3 
         -> pf 'c (c1 && c2 && c3)
 
 | NotIntro: 'a::E 
          -> c1:bool
          -> pf (l_implies 'a  False) c1 
          -> pf (l_not 'a) c1

 | DestructF: 'a::E 
           -> c1:bool 
           -> pf False c1 
           -> pf 'a c1

 (* Custom rules for this app *)
 | BoiledEgg: pf (Valid [{reagent="raw egg"; quantity=1}]) true
     
 | ChemicalVolcano: pf (Valid [{reagent="N2H8Cr207"; quantity=1}]) true
     
 | Combine: r1:expsetup 
         -> r2:expsetup 
         -> r3:expsetup 
         -> pf (l_implies
                  (l_and (ListUnion r1 r2 r3)
                     (l_and (Valid r1) (Valid r2)))
                  (Valid r3)) true
   
 | Cut: r:expsetup{Valid r} 
     -> xid:int 
     -> p:prin
     -> b:bytes{Wire r b}
     -> d:dsig
     -> pf (Valid r) false 

(* The type of experiment records and utility functions on the database *)
type expsetup_obs = expsetup * string
type Observed :: expsetup_obs => E
type exp (c:bool) = (xid:option int * p:prin * r:expsetup *
                     prov:pf (Valid r) c * obs:string *
                     d:dsig{Says p (Observed (r, obs))})
type db = list (exp true)
type xid = int

val insert: exp true -> int
val lookup: xid -> option (exp true)
val dbprin:prin
private val dbSigningKey: sk dbprin expsetup Valid
val lookupPubKey: p:prin -> pk p (expsetup * string) Observed
val lookupProof: r:expsetup -> xid:int -> optionP (pf (Valid r) true)

(* An assumption relating concrete proof terms to ghost refinements *)
assume Cut_free_is_valid: forall (r:expsetup) (c:bool) (q:pf (Valid r) c). (c=true => Valid r)

(* Selectively erasing logical evidence; replace with crypto evidence *)
let readExp xid : option (exp false)  =
  match lookup xid with
    | Some ((_, p, r, pf, obs, dsig)) ->
        (match pickle r with 
           | Some bytes -> 
               let dsig = rsa_sign dbprin dbSigningKey r bytes in 
                 (Some (Some xid, p, r, (Cut r xid dbprin bytes dsig), obs, dsig) : option(exp false))
           | None -> None)
    | None -> None

val expandCuts:  'a::E
              -> c:bool
              -> pf 'a c
              -> optionP (pf 'a true)
let rec expandCuts c pf = 
  if c=true then SomeP pf
  else (match pf with
          | Cut r xid _ _ _ -> lookupProof r xid

          | AndElim1 c1 pf -> 
              (match expandCuts c1 pf with
                 | SomeP pf' -> SomeP (AndElim1 true pf')
                 | _ -> NoneP)

          | AndElim2 c1 pf -> 
              (match expandCuts c1 pf with
                 | SomeP pf' -> SomeP (AndElim2 true pf')
                 | _ -> NoneP)
                
          | AndIntro c1 c2 pf1 pf2 -> 
              (match expandCuts c1 pf1, expandCuts c2 pf2 with 
                 | SomeP pf1', SomeP pf2' -> SomeP (AndIntro true true pf1' pf2')
                 | _ -> NoneP)
                
          | OrIntro c1 pf -> 
              (match expandCuts c1 pf with 
                 | SomeP pf' -> SomeP (OrIntro true pf')
                 | _ -> NoneP)
                
          | OrElim c1 c2 c3 pf1 pf2 pf3 -> 
              (match expandCuts c1 pf1, expandCuts c2 pf2, expandCuts c3 pf3 with 
                 | SomeP pf1', SomeP pf2', SomeP pf3' -> SomeP (OrElim true true true pf1' pf2' pf3')
                 | _ -> NoneP)

          | NotIntro c1 pf1 ->
              (match expandCuts c1 pf1 with 
                 | SomeP pf1' -> SomeP (NotIntro true pf1')
                 | _ -> NoneP)

          | DestructF c1 pf1 ->
              (match expandCuts c1 pf1 with 
                 | SomeP pf1' -> SomeP (DestructF true pf1')
                 | _ -> NoneP)

          | _ -> NoneP)

(* Inserting a new record in the DB *)
let insertExp (p:prin) (r:expsetup) (obs:string) (b:bytes{Wire (r,obs) b})
              (c:bool) (pf: pf (Valid r) c) (d:dsig) : option xid =
  let k = lookupPubKey p in
  if rsa_verify p k (r,obs) b d then
    match (expandCuts c pf) with
      | SomeP pf' -> Some (insert (None, p, r, pf', obs, d))
      | _ -> None
  else None

end
