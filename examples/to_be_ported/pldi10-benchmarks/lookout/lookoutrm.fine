#light

module LookoutRM : DataModel(* , Externs *)
open Authentication
open DataModel
open Externs

(* First, several utility functions *)
val add_attr: a:attr -> s:st -> stplus s a
let add_attr a s = ACons a s
  
val remove_attr: a:attr -> s:st -> stminus s a
let rec remove_attr a s = match s with
  | ANil -> ANil
  | ACons b tl ->
      if a=b then remove_attr a tl
      else ACons b (remove_attr a tl)

val q_add_listener: evname -> evlistener -> evqueue -> evqueue
let rec q_add_listener en l q = match q with
  | Nil -> Cons (en, Cons l Nil) Nil
  | Cons (en', ls) tl when en=en' -> Cons (en, Cons l ls) tl
  | Cons (en', ls) tl -> Cons (en', ls) (q_add_listener en l tl)

val add_listener: evname -> evlistener -> unit
let add_listener en l =
  let evq = ext_get_evt_queue () in
  let evq' = q_add_listener en l evq in
    ext_set_evt_queue evq'

val l_remove_listeners: prin -> evlisteners -> evlisteners
let rec l_remove_listeners p l = match l with
  | Nil -> Nil
  | Cons (q, _) tl when (p=q) -> l_remove_listeners p tl
  | Cons (q, m) tl -> Cons (q, m) (l_remove_listeners p tl)

val q_remove_listener: evname -> prin -> evqueue -> evqueue
let rec q_remove_listener en p q = match q with
  | Nil -> Nil
  | Cons (en', ls) tl when en=en' -> Cons (en', l_remove_listeners p ls) tl
  | Cons (en', ls) tl -> Cons (en', ls) (q_remove_listener en p tl)

val remove_listener: evname -> prin -> unit
let remove_listener en p =
  let evq = ext_get_evt_queue () in
  let evq' = q_remove_listener en p evq in
    ext_set_evt_queue evq'


(********************************************************************************)
(* An API exposed to plugins *)
(********************************************************************************)
val get_inbox: p:prin 
            -> cred p 
            -> s:dst (Permits LA p GetInbox) 
            -> StateIs s 
            -> (list email * StateIs s)
let get_inbox p c s tok = (ext_get_inbox (), tok)


val read_email: p:prin 
             -> cred p 
             -> e:email 
             -> s:dst (Permits LA p (ReadEmail e)) 
             -> StateIs s 
             -> (tracked string (Email e) * StateIs s)
let read_email p c e s tok = (Tagged e.contents (Email e), tok)

val mk_appt: p:prin 
          -> cred p 
          -> q:prov 
          -> a:tracked appt q 
          -> s:dst (Permits LA p (MkAppt q a)) 
          -> StateIs s
          -> StateIs s
let mk_appt p c q a s tok = match a with
  | Tagged aa _ -> let _ = ext_mk_appt aa in tok

val reply_to: p:prin 
           -> cred p
           -> orig:email
           -> q:prov 
           -> reply:tracked string q 
           -> s:dst (Permits LA p (ReplyTo orig q reply))
           -> StateIs s
           -> (s':stplus s (HasRepliedTo p orig) * StateIs s')
let reply_to p c orig q r s tok = match r with
  | Tagged rr _ ->
      let _ = ext_send_email orig.sender rr in
      let s' = add_attr (HasRepliedTo p orig) s in
        (s', Sign s')

val install_plugin: u:prin 
                 -> p:prin 
                 -> s:dst (Permits LA u (InstallPlugin p))
                 -> StateIs s
                 -> (s':stplus s (Role p Plugin) * StateIs s')
let install_plugin u p s tok =
  let s' = add_attr (Role p Plugin) s in
    (s', Sign s')

val subscribe: p:prin 
            -> cred p
            -> e:evname 
            -> handler: (ev -> state -> state) 
            -> s:dst (Permits LA p (Subscribe e))
            -> StateIs s
            -> (s':stplus s (Subscribed p e) * StateIs s')
let subscribe p c e handler s tok =
  let listener = (p, handler) in
  let _ = add_listener e listener in
  let s' = add_attr (Subscribed p e) s in
    (s', Sign s')
               
val unsubscribe: p:prin 
              -> cred p
              -> e:evname 
              -> s:dst (Permits LA p (UnSubscribe e))
              -> StateIs s
              -> (s':stminus s (Subscribed p e) * StateIs s')
let unsubscribe p c e s tok =
  let s' = remove_attr (Subscribed p e) s in
  let _ = remove_listener e p in
    (s', Sign s')

val set_cookie: p:prin 
             -> cred p
             -> name:string 
             -> value:(q:prov * tracked string q)
             -> accesspolicy:(r:prin -> x:bool { x=true => Valid (Permits p r (ReadCookie p name))}) 
             -> s:dst (Permits LA p (SetCookie name))
             -> StateIs s
             -> StateIs s
let set_cookie p c name value accesspolicy s tok =
  let (q, v) = value in
  let cookie = ((p, name, q, v, accesspolicy):cookie) in
  let _ = ext_store_cookie (CR cookie) in
    tok

(* val get_cookie: p:prin  *)
(*              -> cred p *)
(*              -> name:string  *)
(*              -> owner:prin  *)
(*              -> s:dst (Permits LA p (ReadCookie owner name)) *)
(*              -> StateIs s *)
(*              -> (option (x:(q:prov * tracked string (Join (Cookie name owner) q)) { Valid (Permits owner p (ReadCookie owner name))}) * StateIs s) *)
(* let get_cookie p c name owner s tok = *)
(*   match ext_get_cookie owner name with *)
(*     | None -> None, tok *)
(*     | Some ((q, v, accesspol)) -> *)
(*         if accesspol p then *)
(*           match v with *)
(*               Tagged vv qq -> *)
(*                 let pkg : (q:prov * tracked string (Join (Cookie name owner) q)) *)
(*                     = (qq, Tagged vv (Join (Cookie name owner) qq)) in *)
(*                   Some pkg, tok *)
(*         else None, tok *)


val check_attr: a:st -> r:attr -> b:bool { (b=true => In r a) && (b=false => not (In r a))}
let rec check_attr a r = match a with
  | ANil -> false
  | ACons s tl -> if r=s then true else check_attr tl r
          
(* ******************************************************************************** *)
(* Not strictly part of the RM. This is the ev dispatch stuff *)
(* ******************************************************************************** *)

val ev_name: ev -> evname
let ev_name = function
  | E_IncomingMsg _ -> IncomingMsg
  | E_OutgoingMsg _ -> OutgoingMsg
  | E_Timer _ _ -> Timer
  | E_ComposeEmail -> ComposeEmail
  | E_SaveDraft -> SaveDraft
  | E_NewAppt -> NewAppt
  | E_EditAppt _ -> EditAppt

val folder: ev -> state -> evlistener >> state
let folder ev st el =
  let (p, handler) = el in
    handler ev st

val dispatch_ev: evname -> ev -> state -> state
let rec dispatch_ev evn ev st =
  let evq = ext_get_evt_queue () in
    match assoc evn evq with
      | None -> st
      | Some evl -> fold_left_A (folder ev) st evl
            
val evtloop: event -> state -> state
let evtloop ev s = match ev with
  | PluginInit init -> init s
  | Ev ev -> dispatch_ev (ev_name ev) ev s
  
