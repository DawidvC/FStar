#light 

module LookoutUserPolicy : DataModel
open Authentication
open LookoutRM
open DataModel

assume UserSpeaksForLA: forall (p:prin) (s:st).
  (In (Role p User) s) && 
  (forall (a:action) (q:prin). 
     (Derivable s (Permits p q a)) => 
      Derivable s (Permits LA q a))

assume PluginsGetInbox: forall (p:prin) (s:st).
  (In (Role p Plugin) s) =>
  (Derivable s (Permits LA p GetInbox))

assume PluginsReadEmail: forall (p:prin) (e:email) (s:st).
  (In (Role p Plugin) s  && In (Role e.sender Friend) s) =>
  (Derivable s (Permits LA p (ReadEmail e)))

assume PluginsSubscribe: forall (p:prin) (s:st).
  (In (Role p Plugin) s)  => 
  (Derivable s (Permits LA p (Subscribe IncomingMsg)))

assume PluginsMkAppt: forall (p:prin) (e:email) (a:tracked appt (Email e)) (s:st).
  (In (Role p Plugin) s  && In (Role e.sender Friend) s) =>
  (Derivable s (Permits LA p (MkAppt (Email e) a)))

assume PluginsReplyOnce: forall (p:prin) (e:email) (reply:tracked string (Email e)) (s:st).
  (In (Role p Plugin) s && not (In (HasRepliedTo p e) s)) =>
  (Derivable s (Permits LA p (ReplyTo e (Email e) reply)))

val initial_state:unit -> state
let initial_state x =
  let a = ACons (Role (U "Alice") User) (ACons (Role (U "Bob") Friend) ANil) in
    (a, Sign a)
end
