#light 

module DataModel
open Authentication
type date

(********************************************************************************)
(* Basic data model, accessors and constructors *)
(********************************************************************************)
private type email = {sender:prin; contents:string}
private type appt = {who:prin; time:date; note:string}
type inbox=list email
type calendar=list appt

val mk_email: prin -> string -> email
let mk_email p s = {sender=p; contents=s}

val sender:e:email -> p:prin { p=e.sender}
let sender e = e.sender

val new_appt: prin -> date -> string -> appt
let new_appt p d n = {who=p; time=d; note=n}

(********************************************************************************)
(* Information flow constructs *)
(********************************************************************************)
type prov =
  | Email : email -> prov
  | Appt : appt -> prov
  | Cookie : string -> prin -> prov
  | Join : prov -> prov -> prov
type CanFlow :: prov => prin => P

private type tracked :: * => prov => * =
  | Tagged : 'a -> p:prov -> tracked 'a p

val fmap:('a -> 'b) -> p:prov -> tracked 'a p -> tracked 'b p
let fmap f p x = match x with
  | Tagged y _ -> Tagged (f y) p

val popt: p:prov -> tracked (option 'a) p -> option (tracked 'a p)
let popt p = function
  | Tagged None _ -> None
  | Tagged (Some x) _ -> Some (Tagged x p)

(********************************************************************************)
(* Authorization policy constructs *)
(********************************************************************************)
type role =
  | Plugin : role
  | Friend : role
  | User : role

type evname =
  | IncomingMsg: evname
  | OutgoingMsg: evname
  | Timer: evname
  | ComposeEmail: evname
  | SaveDraft: evname
  | NewAppt: evname 
  | EditAppt: evname

type ev = 
  | E_IncomingMsg: email -> ev
  | E_OutgoingMsg: email -> ev
  | E_Timer: string -> int -> ev
  | E_ComposeEmail: ev
  | E_SaveDraft: ev
  | E_NewAppt: ev 
  | E_EditAppt: appt -> ev

type action =
  | GetInbox : action
  | ReadEmail : email -> action
  | ReplyTo: email -> q:prov -> reply:tracked string q -> action
  | MkAppt: q:prov -> tracked appt q -> action
  | InstallPlugin : prin -> action
  | ReadCookie: prin -> string -> action
  | SetCookie: string -> action
  | Subscribe : evname -> action
  | UnSubscribe : evname -> action

(********************************************************************************)
(* Authorization state *)
(********************************************************************************)
type attr =
  | Role : prin -> role -> attr
  | HasRepliedTo : prin -> email -> attr
  | Subscribed: prin -> evname -> attr

(* axiomatizing membership for polymorphic lists doesn't work at the moment *)
(* TODO: This works now ... change this to use Prims.list attr *)
type attrs :: * =
  | ANil : attrs
  | ACons : attr -> attrs -> attrs

type In :: attr => attrs => P
assume Hd:forall (a:attr) (tl:attrs). In a (ACons a tl)
assume Tl:forall (a:attr) (b:attr) (tl:attrs). In a tl => In a (ACons b tl)
assume notinNil: forall (a:attr). not (In a ANil)
assume notinCons: forall (a:attr) (b:attr) (tl:attrs). ((not (In a tl)) && (not (a=b))) => not (In a (ACons b tl))

(* Registered ev handlers *)
type st :: * = attrs
type StateIs :: st => A = 
   | Sign : s:st -> StateIs s
type state :: A = (s:st * StateIs s)

(* Various abbreviations of the st/state type *)

(* prenex and implies rewritten *)
type stplus (s:attrs) (i:attr) = x:attrs { (forall (b:attr). In i x && ((not (In b s)) || (In b x)))}

(* prenex and implies rewritten *)
type stminus (s:attrs) (a:attr) = x:attrs { (forall (b:attr). (not (In a x)) && ((not (In b s && not(b=a))) || (In b x)))}

(* Permits p q a: p permits q to do action a *)
type perm = 
  | Permits : prin -> prin -> action -> perm
type Derivable :: st => perm => P
type dst (p:perm) = s:st { Derivable s p}
type inst (a:attr) = s:st { In a s}

(* Cookie store *)
type Valid :: perm => P
type authfun (p:prin) (name:string) = u:prin -> x:bool { x=true => Valid (Permits p u (ReadCookie p name))}
type cookie = (p:prin * name:string * q:prov * z:tracked string q * authfun p name)
type scookie (p:prin) (name:string) = (q:prov * z:tracked string q * authfun p name)
type cookiestore = list cookie

(* Event queues *)
type evlistener = (prin * (ev -> state -> state))
type evlisteners = list evlistener
type evqueue = list (evname*evlisteners)

(* Finally, evs that will be raised by the fsharp handler *)
type event = 
  | Ev : ev -> event
  | PluginInit : (state -> state) -> event

