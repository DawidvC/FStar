#light 

module ApptMaker
open Authentication
open DataModel
open LookoutRM
open Externs

type pstate (p:prin) :: A = (s:inst (Role p Plugin) * StateIs s)

val process_email: p:prin -> cred p -> pstate p -> email >> pstate p
let process_email p c s mail =
  let (a, tok) = s in
  let mail_sender = sender mail in
    if check_attr a (Role mail_sender Friend) then
      let (pstring, tok) = read_email p c mail a tok in
      let opt_appt = fmap (detect_appt_from mail_sender) (Email mail) pstring in
        (match popt (Email mail) opt_appt with
           | None -> (a, tok) (* no appointment extracted ... do nothing *)
           | Some p_appt ->
               let tok = mk_appt p c (Email mail) p_appt a tok in
               let reply = fmap appt_as_string (Email mail) p_appt in
                 if check_attr a (HasRepliedTo p mail) then (a, tok)
                 else
                   let (a', tok') = reply_to p c mail (Email mail) reply a tok in
                     a', tok')
    else (a,tok)

val process_email': ev -> state -> state
let process_email' ev s = match ev with
  | E_IncomingMsg email ->
      let (a, tok) = s in
      let (p, cred) = get_credential () in
        if check_attr a (Role p Plugin) then
          let a', tok' = process_email p cred (a,tok) email in
            a', tok'
        else (a,tok)
  | _ -> s (* should be impossible *)

val init: state -> state
let init st = 
  let (a, tok) = st in
  let (p, cred) = get_credential () in
    if check_attr a (Role p Plugin) then 
      let a', tok' = subscribe p cred IncomingMsg process_email' a tok in
        a', tok'
    else (a, tok)

(* val run : plugin:prin -> cred<;plugin> -> state -> state *)
(* let run plugin c s = *)
(*   let (a, tok) = s in *)
(*     if  *)
(*       let inbox, tok = get_inbox plugin c a tok in *)
(*         foldst (process_email plugin c) inbox (a,tok) *)

              
