#light 

module Authentication
  type prin =
    | U : string -> prin
    | Admin : prin

  private type cred :: prin => * = 
    | Cred : p:prin -> cred p

  val login : p:prin -> pw:string -> option (cred p)
  let login p pw = match p, pw with
    | U "Alice", "APassword" -> Some(Cred p)
    | Admin, "Secret" -> Some(Cred p)
    | _ -> None
end

module FileAC
  open Authentication

  type file
  type CanWrite :: prin => file => P
  assume Ax1:forall (f:file). CanWrite Admin f

  val fwrite: p:prin -> cred p -> (f:file {CanWrite p f}) -> string -> unit 
  let fwrite p c f s = (* Call system write here  *)()
end

module Client
open Authentication
open FileAC

val client : p:prin -> cred p -> file -> unit
let client p c f = match p with
  | Admin -> fwrite p c f "Hello"
  | _ -> ()
end
