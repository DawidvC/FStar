#light

module Infoflow

type label =
  | High : label
  | Low  : label
  | Join : label -> label -> label

type CanFlow::label => label => P

assume A3:forall (l:label). CanFlow l l
assume A4:forall (l:label). CanFlow Low l
assume A5:forall (src1:label) (src2:label) (dst:label). (CanFlow src1 dst && CanFlow src2 dst) => CanFlow (Join src1 src2) dst
assume A6:forall (src:label) (dst1:label) (dst2:label). (CanFlow src dst1 && CanFlow src dst2) => CanFlow src (Join dst1 dst2)

type labeled::* => label => * =
  | LTuple:'a -> l:label -> labeled 'a l

type closed::* => * =
  | Close: l:label -> labeled 'a l -> closed 'a

val lift:'a -> labeled 'a Low
let lift x = LTuple x Low

val testquery:'a -> l:label -> labeled 'a Low
let testquery x l =
  match l with
    | Low -> LTuple x l
    | _ -> LTuple x Low

val bind: lf:label 
       -> lx:label 
       -> labeled ('a -> 'b) lf 
       -> labeled 'a lx
       -> labeled 'b (Join lf lx)
let bind lf lx f x =
  match (f,x) with
    | LTuple g m, LTuple y n ->
        let result = g y in
	  LTuple result (Join m n)
            

val checkFlow: l:label -> m:label -> option (x:unit {CanFlow l m})
let rec checkFlow l m =
  match l, m with
    | High, Low -> None
    | l1, l2 when l1 = l2  -> Some()
    | Low, _ -> Some()
    | High, Join m1 m2 ->
        begin
          match (checkFlow High m1, checkFlow High m2) with
            | Some _, Some _ -> Some()
            | _ -> None
        end
    | Join l1 l2, _ ->
        begin
          match (checkFlow l1 m, checkFlow l2 m) with
            | Some _, Some _ -> Some()
            | _ -> None
        end
    | _ -> None

val checkFlowBool : l:label -> m:label -> z:bool {z=true => CanFlow l m}
let rec checkFlowBool l m =
  match l, m with
    | l1, l2 when l1=l2 -> true
    | Low, _ -> true
    | Join l1 l2, _ ->
        let l1m = checkFlowBool l1 m in
        let l2m = checkFlowBool l2 m in
          l1m && l2m
    | High, Join m1 m2 ->
        let hm1 = checkFlowBool High m1 in
        let hm2 = checkFlowBool High m2 in
          hm1 && hm2
    | _ -> false

val read:unit -> closed string
val print:l:(m:label {CanFlow m Low}) -> labeled string l -> unit
val strcat: string -> string -> string
end

module Client
open Infoflow

val main1:unit -> unit
let main1 x =
  match read () with
    | Close src s1 ->
        (match checkFlow src Low with
	   | Some _ -> print src s1
           | _ -> ())
          
val main2:unit -> unit
let main2 x =
  match read (), read () with
      Close src1 s1, Close src2 s2 ->
        let lstrcat = lift strcat in  (* labeled<string -> string -> string; Low> *)
        let tmp = bind Low src1 lstrcat s1 in (* :labeled<string -> string; Join(Low, src1)> *)
        let result = bind (Join Low src1) src2 tmp s2 in (* :labeled<string; Join(Join(Low, src1), src2)> *)
        let lres = Join (Join Low src1) src2 in
          match checkFlow lres Low with
	    | Some _ -> print lres result
            | _ -> ()

val main3:unit -> unit
let main3 x =
  match read (), read () with
      Close src1 s1, Close src2 s2 ->
        let lstrcat = lift strcat in  (* labeled<string -> string -> string; Low> *)
        let tmp = bind Low src1 lstrcat s1 in (* :labeled<string -> string; Join(Low, src1)> *)
        let result = bind (Join Low src1) src2 tmp s2 in (* :labeled<string; Join(Join(Low, src1), src2)> *)
        let lres = Join (Join Low src1) src2 in
          match checkFlowBool lres Low with
	    | true -> print lres result
            | _ -> ()

end
