#light
(* Checking a dynamically tagged type-state property on a file API *)

module File 

  type state =
    | FileOpen : state
    | FileClosed : state

  type file
  type sfile (s:file) = f1:file { f1 = s }

  val system_file_open: string -> file
  val system_file_read: file -> string
  val system_file_close: file -> unit

  type stateof (f2:file) :: (state => A) =
    | Witness : s:state -> stateof f2 s 

  val mkwitness : f3:file -> stateof f3 FileOpen
  let mkwitness f3 = Witness FileOpen
     
  val packfile: file -> (f4:file * stateof f4 FileOpen)
  let packfile g = (g, Witness FileOpen)

  type tfile (s:state) :: A = (f:file * stateof f s)

  val fopen: string -> tfile FileOpen
  let fopen fn =
    let g = system_file_open fn in
      (g, Witness FileOpen)
        
  val unpack_pack: tfile FileOpen -> tfile FileOpen
  let unpack_pack tf =
    match tf with  (* Unpacks get desugared into matches as below *)
      | (g, state) -> (g, state)
          
  val fread: tfile FileOpen -> (string * tfile FileOpen)
  let fread tf =
    let (f, state) = tf in
    let data = system_file_read f in
      data, (f, state)

  val fread_curry: f:file -> (stateof f FileOpen) -> (string * stateof f FileOpen)
  let fread_curry f s =
    let data = system_file_read f in
      data, s
 
  val fclose: tfile FileOpen -> tfile FileClosed
  let fclose tf =
    let (f, state) = tf in
    let _ = system_file_close f in
      (f, Witness FileClosed)

  type alist ('a::A) :: A =
    | ANil:alist 'a
    | ACons:'a -> alist 'a -> alist 'a
      
  type aoption ('a::A) :: A =
    | ANone : aoption 'a
    | ASome : 'a -> aoption 'a

  type witness :: A = (f:file * s:state * stateof f s)
  type store :: A = alist witness
  type witnessid (g:file) :: A = (f:(x:file {x = g}) * s:state * stateof f s)

  val a_append : 'a::A -> alist 'a -> alist 'a >> alist 'a
  let rec a_append l1 l2 = match l1 with
    | ANil -> l2
    | ACons hd tl -> ACons hd (a_append tl l2)

  val findf: f:file -> prefix:store -> s:store >> (aoption (witnessid f) * store)
  let rec findf f prefix s =
    match s with
      | ANil -> ANone, prefix
      | ACons (g, s, w) tl ->
          if g = f then
            ASome ((g, s, w)), a_append prefix tl
          else
            findf f (ACons (g,s,w) prefix) tl
            
  val readstore: f:file -> store -> (aoption (witnessid f) * store)
  let readstore f s = findf f ANil s
        
  val writestore: witness -> store >> store
  let writestore w s = ACons w s
                  
  val tryread_v2: file -> store -> (option string * store)
  let tryread_v2 fh s =
    let w, s' = readstore fh s in
      match w with
        | ANone -> None, s' (* couldn't find fileid in store *)

        | ASome ((fh', FileOpen, cap)) ->
            let data, cap = fread_curry fh' cap in (* pass to fread, get data and cap back *)
            let s' = writestore (fh', FileOpen, cap) s' in (* restore cap to the store *)
              Some data, s'

        | ASome ((fh', state, cap)) ->
            let s' = writestore (fh', state, cap) s' in (* restore cap to the store *)
              None, s'

(*   val tryread: file -> store -> (option<string> * store) *)
(*   let tryread fh s = *)
(*     let w, s' = readstore fh s in *)
(*       match w with *)
(*         | ANone -> None, s'  (\* couldn't find fileid in store; no capability to read *\) *)

(*         | ASome witness -> *)
(*             let (fh', state, cap) = witness in *)
(*             let data_opt, cap = *)
(*               ((if state = FileOpen then  (\* file is in the open state *\) *)
(*                   let data, cap = fread_curry fh' cap in (\* pass to fread, get data and cap back *\) *)
(*                     Some data, cap (\* <--- DCIL Checker chokes on this *\) *)
(*                 else None, cap):(option<string> * stateof<;fh',state>)) in *)
(*             let s' = writestore (fh', state, cap) s' in (\* restore cap to the store *\) *)
(*               data_opt, s' *)
