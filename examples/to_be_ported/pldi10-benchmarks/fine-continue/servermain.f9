#light 

module ServerMain
open Externs
open ServerRM

val checkPhase: s:st -> p:phase -> b:bool { b=true => s.phase=p}
val checkNPR: a:st -> b:bool { b=true => NoPendingReviews a.items}

val loop: socket -> state -> int 
let rec loop sock s = begin
  match getRequest sock with

    | RS (ReqAdvancePhase p) stream ->
        let (a,tok) = s in
          if checkPhase a Reviewing && checkIn (Role p Chair) a && checkNPR a then (* checkNoPendingReviews a.items then *)
            let _ = sendResponse stream "Phase changed." in
              loop sock (advance_phase p (a,tok))
          else if checkPhase a Init && checkIn (Role p Chair) a then
            let s = (advance_phase p (a,tok)) in
            let _ = sendResponse stream "Phase changed." in
              loop sock s
          else
            let _ = sendResponse stream "Sorry, couldn't process your request." in (* add more permissible phases *)
              loop sock (a,tok)

    | RS (ReqAddReviewer p q) stream ->
        let (a,tok) = s in
          if checkPhase a Init && checkIn (Role p Chair) a then
            let _ = sendResponse stream "Reviewer added." in
              loop sock (add_reviewer p q (a,tok))
          else
            let _ = sendResponse stream "Sorry, couldn't process your request." in
              loop sock (a,tok)

    | RS (ReqBecomeAuthor p) stream ->
        let (a,tok) = s in
          if checkPhase a PreSubmission then
            let _ = sendResponse stream "Author added." in
              loop sock (become_author p (a,tok))
          else
            let _ = sendResponse stream "Sorry, couldn't process your request." in
              loop sock (a,tok)

    | RS (ReqSubmitPaper p paper) stream ->
        let (a,tok) = s in
          if checkPhase a PreSubmission && (checkIn (Role p Author) a) then
            let _ = sendResponse stream "Thanks for your submission!" in
              loop sock (submit_paper p paper (a,tok))
          else if (checkPhase a Submission) && (checkIn (Role p Author) a) then
            let _ = sendResponse stream "Thanks for your submission!" in
              loop sock (submit_paper p paper (a,tok))
          else
            let _ = sendResponse stream "Sorry, couldn't process your request." in
              loop sock (a,tok)

    | RS (ReqReadPaperList p) stream ->
        let (a,tok) = s in
          if (checkPhase a Bidding) && (checkIn (Role p Reviewer) a) then
            let _, s' = read_paper_list p (a,tok) in
            let _ = sendResponse stream "PAPER LIST: BLAH..." in
              loop sock s'
          else if (checkPhase a Reviewing) && (checkIn (Role p Reviewer) a) then
            let _, s' = read_paper_list p (a,tok) in
            let _ = sendResponse stream "PAPER LIST: BLAH..." in
              loop sock s'
          else if (checkPhase a Discussion) && (checkIn (Role p Reviewer) a) then
            let _, s' = read_paper_list p (a,tok) in
            let _ = sendResponse stream "PAPER LIST: BLAH..." in
              loop sock s'
          else
            let _ = sendResponse stream "Sorry, couldn't process your request." in (* not supporting all acceptable phases *)
              loop sock (a,tok)
                
    | RS (ReqReadPaper p i) stream ->
        let (a,tok) = s in
          if (checkPhase a Bidding) && (checkIn (Role p Reviewer) a) then
            let _, s' = read_paper p i (a,tok) in
            let _ = sendResponse stream "PAPER: BLAH..." in
              loop sock s'
          else if (checkPhase a Reviewing) && (checkIn (Role p Reviewer) a) then
            let _, s' = read_paper p i (a,tok) in
            let _ = sendResponse stream "PAPER: BLAH..." in
              loop sock s'
          else if (checkPhase a Discussion) && (checkIn (Role p Reviewer) a) then
            let _, s' = read_paper p i (a,tok) in
            let _ = sendResponse stream "PAPER: BLAH..." in
              loop sock s'
          else
            let _ = sendResponse stream "Sorry, couldn't process your request." in (* not supporting all acceptable phases *)
              loop sock (a,tok)
                
    | RS (ReqBidPaper p i) stream ->
        let (a,tok) = s in
          if (checkPhase a Bidding && (checkIn (Role p Reviewer) a)) then
            let _ = sendResponse stream "Your bid has been duly noted." in
              loop sock (bid_paper p i (a,tok))
          else
            let _ = sendResponse stream "Sorry, couldn't process your request." in
              loop sock (a,tok)

    | RS (ReqMarkConflict p i) stream ->
        let (a,tok) = s in
          if checkPhase a Bidding && checkIn (Role p Reviewer) a then
            let _ = sendResponse stream "Thanks for letting me know." in
              loop sock (mark_conflict p i (a,tok))
          else
            let _ = sendResponse stream "Sorry, couldn't process your request." in
              loop sock (a,tok)

    | RS (ReqAssignPaper p q i) stream ->
        let (a,tok) = s in
          if checkPhase a Assignment && checkIn (Role p Chair) a then
            let _ = sendResponse stream "Assigned." in
              loop sock (assign_paper p q i (a,tok))
          else
            let _ = sendResponse stream "Sorry, couldn't process your request." in
              loop sock (a,tok)

    | RS (ReqReviewPaper p paper review) stream ->
        let (a,tok) = s in
          if checkPhase a Reviewing && checkIn (Assigned p paper) a then
            let _ = sendResponse stream "Thanks for you review!" in
              loop sock (review_paper p paper review (a,tok))
          else
            let _ = sendResponse stream "Sorry, couldn't process your request." in
              loop sock (a,tok)

    | RS (ReqReadReviews p i) stream ->
        let (a,tok) = s in
          if checkPhase a Notification && checkIn (Role p Author) a && checkIn (Submitted p i) a then
            let _, s' = read_reviews p i (a,tok) in
            let _ = sendResponse stream "REVIEWS: BLAH..." in
              loop sock s'
          else if checkPhase a Discussion && checkIn (Role p Reviewer) a then
            let _, s' = read_reviews p i (a,tok) in
            let _ = sendResponse stream "REVIEWS: BLAH..." in
              loop sock s'
          else if checkPhase a Reviewing && checkIn (Role p Reviewer) a && checkIn (Reviewed p i) a then
            let _, s' = read_reviews p i (a,tok) in
            let _ = sendResponse stream "REVIEWS: BLAH..." in
              loop sock s'
          else if checkPhase a Reviewing && checkIn (Role p Reviewer) a && (not (checkIn (Assigned p i) a)) then
            let _, s' = read_reviews p i (a,tok) in
            let _ = sendResponse stream "REVIEWS: BLAH..." in
              loop sock s'
          else (* TODO add more acceptable cases *)
            let _ = sendResponse stream "Sorry, couldn't process your request." in
              loop sock (a,tok)
                
    | RS (ReqMakeDecision p i) stream ->
        let (a,tok) = s in
          if checkPhase a Discussion && checkIn (Role p Chair) a then
            let _ = sendResponse stream "Decision recorded." in
              loop sock (make_decision p i (a,tok))
          else
            let _ = sendResponse stream "Sorry, couldn't process your request." in
              loop sock (a,tok)
                
    | RS ReqGarbage stream ->
        let (a,tok) = s in
        let _ = sendResponse stream "Sorry, couldn't process your request." in
          loop sock (a,tok)

end
;;

let init = startup_state 0 in
let sock = startConnection 1 in
let _ = loop sock init in
  ()
  
