#light 

module Externs

(* extern F# conf.Types *)
type prin = 
  | U : string -> prin
  | Admin : prin

(* extern F# conf.Types *)
type paper = {papid:int; title:string; author:prin; paperdata:string}

(* extern F# conf.Types *)
type review = {rid:int; pid:int; reviewer:prin; reviewdata:string}

(* extern F# conf.Types *)
type papers =
  | PNil: papers
  | PCons: paper -> papers -> papers

(* extern F# conf.Types *)
type reviews =
  | RNil: reviews
  | RCons: review -> reviews -> reviews

(* extern F# null conf.Types *)
type request =
  | ReqAdvancePhase : prin -> request
  | ReqAddReviewer : prin -> prin -> request
  | ReqBecomeAuthor : prin -> request
  | ReqSubmitPaper : prin -> paper -> request
  | ReqReadPaperList : prin -> request
  | ReqReadPaper : prin -> int -> request
  | ReqBidPaper : prin -> int -> request
  | ReqMarkConflict : prin -> int -> request
  | ReqAssignPaper : prin -> prin -> int -> request
  | ReqReviewPaper : prin -> int -> review -> request
  | ReqReadReviews : prin -> int -> request
  | ReqMakeDecision : prin -> int -> request
  | ReqGarbage : request

(* extern F# conf.Types *)
type role =
  | Chair: role
  | Author: role
  | Reviewer: role
  | Dummy : int -> role

(* extern F# null conf.Types  *)
type phase =
  | Init:  phase
  | PreSubmission: phase (* polls open, must register before this phase ends *)
  | Submission: phase
  | Bidding: phase (* bids and conflicts happen at same time *)
  | Assignment: phase
  | Reviewing: phase
  | Discussion: phase
  | Notification: phase
  | Done: phase

(* extern F# conf.Types *)
type action =
  | AdvancePhase: action
  | AddReviewer: prin -> action
  | BecomeAuthor: action
  | SubmitPaper: action
  | ReadPaperList: action
  | ReadPaper: int -> action
  | BidPaper: int -> action
  | MarkConflict: int -> action
  | AssignPaper: prin -> int -> action
  | ReviewPaper: int -> action
  | ReadReviews: int -> action
  | MakeDecision: int -> action

(* extern F# conf.Types *)
type item =
  (* items to record what actions have occurred *)
  | Role: prin -> role -> item
  | Submitted: prin -> int -> item
  | Bid: prin -> int -> item
  | Conflict: prin -> int -> item
  | Assigned: prin -> int -> item
  | Reviewed: prin -> int -> item
  (* incremental state *)
  | PendingReview: prin -> int -> item (* corresponding to Assigned r i *)

(* extern F# conf.Types *)
type items =
  | ANil: items
  | ACons: item -> items -> items

(* extern F# conf.Types *)
type st = {phase:phase; items:items; papers:papers; reviews:reviews}

(* extern F# conf.Net *)type socket
(* extern F# conf.Net *)type stream

(* extern F# conf.Net *)
type requestAndStream =
  | RS : request -> stream -> requestAndStream

(* extern F# conf.DB *)
type db =
  | Empty : db
  | DB: st -> db

extern reference FS_C {language="F#"; dll="conf"; namespace="Conf"; classname="Common"}
extern reference FS_N {language="F#"; dll="conf"; namespace="Conf"; classname="Net"}
extern reference FS_D {language="F#"; dll="conf"; namespace="Conf"; classname="DB"}

extern FS_C val print_string : string -> int
extern FS_C val string_of_int : int -> string
extern FS_C val strcat : string -> string -> string
extern FS_C val strcat3 : string -> string -> string -> string
extern FS_N val startConnection: int -> socket
extern FS_N val getRequest: socket -> requestAndStream
extern FS_N val sendResponse: stream -> string -> int
extern FS_D val writePaperToDB: paper -> int
extern FS_D val writeReviewToDB: review -> int
extern FS_D val writeStateToDB: st -> int
extern FS_D val rewriteStateToDB: st -> int
extern FS_D val loadDB: int -> db
