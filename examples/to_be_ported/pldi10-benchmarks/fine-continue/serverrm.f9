#light

(* Why are some of the implementations in this file commented out? *)
module ServerRM
open Externs
type In :: item => items => P

assume forall (a:item) (tl:items). In a (ACons a tl)
assume forall (a:item) (b:item) (tl:items). In a tl => In a (ACons b tl)
assume forall (a:item). (not (In a ANil))
assume forall (a:item) (b:item) (tl:items). ((not (In a tl)) && (not (a=b))) => (not (In a (ACons b tl)))

(* specialized props to get around closed-world problem with ints *)
type PendingReviewItem :: item => P
assume forall (p:prin) (r:role). (not (PendingReviewItem (Role p r)))
assume forall (p:prin) (i:int). (not (PendingReviewItem (Submitted p i)))
assume forall (p:prin) (i:int). (not (PendingReviewItem (Bid p i)))
assume forall (p:prin) (i:int). (not (PendingReviewItem (Conflict p i)))
assume forall (p:prin) (i:int). (not (PendingReviewItem (Assigned p i)))
assume forall (p:prin) (i:int). (not (PendingReviewItem (Reviewed p i)))
assume forall (p:prin) (i:int). (PendingReviewItem (PendingReview p i))

(* specialized list ops to go with specialized props *)
type NoPendingReviews :: items => P
(* assume NPR: forall (l:items). (forall (i:item). In i l => not(PendingReviewItem i)) => NoPendingReviews l *)

assume Y1: (NoPendingReviews ANil)
assume forall (x:item) (l:items). ((not (PendingReviewItem x)) && (NoPendingReviews l)) => (NoPendingReviews (ACons x l))

type Permissible :: prin => action => st => P

(* add more capabilities to Chair. *)
assume forall (a:prin) (s:st).  (* not checking that all papers are assigned *)
  ((s.phase = Assignment) =>
      ((In (Role a Chair) s.items) =>
          (Permissible a AdvancePhase s)))
assume forall (a:prin) (s:st).
  ((s.phase = Reviewing) =>
      ((NoPendingReviews s.items) =>
          ((In (Role a Chair) s.items) =>
              (Permissible a AdvancePhase s))))
assume forall (a:prin) (s:st).
  ((s.phase = Init) =>
      ((In (Role a Chair) s.items) =>
          (Permissible a AdvancePhase s)))
assume forall (a:prin) (s:st).
  ((s.phase = PreSubmission) =>
      ((In (Role a Chair) s.items) =>
          (Permissible a AdvancePhase s)))
assume forall (a:prin) (s:st).
  ((s.phase = Submission) =>
      ((In (Role a Chair) s.items) =>
          (Permissible a AdvancePhase s)))
assume forall (a:prin) (s:st).
  ((s.phase = Bidding) =>
      ((In (Role a Chair) s.items) =>
          (Permissible a AdvancePhase s)))
assume forall (a:prin) (s:st).
  ((s.phase = Discussion) =>
      ((In (Role a Chair) s.items) =>
          (Permissible a AdvancePhase s)))
assume forall (a:prin) (s:st).
  ((s.phase = Notification) =>
      ((In (Role a Chair) s.items) =>
          (Permissible a AdvancePhase s)))
assume forall (a:prin) (s:st).
  ((s.phase = Done) =>
      ((In (Role a Chair) s.items) =>
          (Permissible a AdvancePhase s)))
assume forall (a:prin) (b:prin) (s:st).
  ((s.phase = Init) =>
      ((In (Role a Chair) s.items) =>
          (Permissible a (AddReviewer b) s)))
assume forall (a:prin) (s:st).
  (s.phase = PreSubmission) =>
   (Permissible a (BecomeAuthor) s)
assume forall (a:prin) (s:st).
 ((s.phase = PreSubmission) =>
   ((In (Role a Author) s.items) =>
         (Permissible a SubmitPaper s)))
assume forall (a:prin) (s:st).
  ((s.phase = Submission) =>
      (((In (Role a Author) s.items)) =>
          (Permissible a SubmitPaper s)))
assume forall (a:prin) (s:st).
   ((s.phase=Bidding) =>
        (((In (Role a Reviewer) s.items)) =>
            (Permissible a ReadPaperList s)))
assume forall (a:prin) (s:st).
   ((s.phase=Assignment) =>
       (((In (Role a Reviewer) s.items)) =>
           (Permissible a ReadPaperList s)))
assume forall (a:prin) (s:st).
   ((s.phase=Reviewing) =>  
       (((In (Role a Reviewer) s.items)) =>
           (Permissible a ReadPaperList s)))
assume forall (a:prin) (s:st).
  ((s.phase=Discussion) =>
      (((In (Role a Reviewer) s.items)) =>
          (Permissible a ReadPaperList s)))
assume forall (a:prin) (s:st).
  ((s.phase=Notification) =>
      (((In (Role a Reviewer) s.items)) =>
          (Permissible a ReadPaperList s)))
assume forall (a:prin) (s:st).
  ((s.phase=Done) =>
      (((In (Role a Reviewer) s.items)) =>
          (Permissible a ReadPaperList s)))
assume forall (a:prin) (i:int) (s:st).
  ((s.phase=Bidding) =>
      (((In (Role a Reviewer) s.items)) =>
          (Permissible a (ReadPaper i) s)))
assume forall (a:prin) (i:int) (s:st).
   ((s.phase=Assignment) =>
       (((In (Role a Reviewer) s.items)) =>
           (Permissible a (ReadPaper i) s)))
assume forall (a:prin) (i:int) (s:st).
   ((s.phase=Reviewing) =>
       (((In (Role a Reviewer) s.items)) =>
           (Permissible a (ReadPaper i) s)))
assume forall (a:prin) (i:int) (s:st).
   ((s.phase=Discussion) =>
       (((In (Role a Reviewer) s.items)) =>
           (Permissible a (ReadPaper i) s)))
assume forall (a:prin) (i:int) (s:st).
  ((s.phase=Notification) => 
      (((In (Role a Reviewer) s.items)) =>
          (Permissible a (ReadPaper i) s)))
assume forall (a:prin) (i:int) (s:st).
  ((s.phase=Done) => 
      (((In (Role a Reviewer) s.items)) =>
          (Permissible a (ReadPaper i) s)))
(* allowing the reviewer to bid on anything and mark anything as a conflict *)
assume forall (a:prin) (i:int) (s:st).
  ((s.phase = Bidding) =>
      (((In (Role a Reviewer) s.items)) =>
          ((Permissible a (BidPaper i) s) && (Permissible a (MarkConflict i) s))))
(* not placing restrictions on paper assignments *)
assume forall (a:prin) (b:prin) (i:int) (s:st).
  ((s.phase = Assignment) =>
      (((In (Role a Chair) s.items)) =>
          (Permissible a (AssignPaper b i) s)))
assume forall (r:prin) (i:int) (s:st).
  ((s.phase=Reviewing) =>
      (((In (Assigned r i) s.items)) =>
          (Permissible r (ReviewPaper i) s)))
(* during Reviewing phase, be careful to release reviews. in all later phases, unrestricted access.
   authors can read their reviews from Notification on. *)
assume forall (p:prin) (i:int) (s:st).
  ((s.phase=Reviewing) =>
      (((In (Role p Reviewer) s.items) =>
           (((not (In (Assigned p i) s.items)) =>
                (Permissible p (ReadReviews i) s))))))
assume forall (p:prin) (i:int) (s:st).
  ((s.phase = Reviewing) =>
      ((In (Role p Reviewer) s.items) =>
          ((In (Reviewed p i) s.items) =>
              (Permissible p (ReadReviews i) s))))
assume forall (p:prin) (i:int) (s:st).
  ((s.phase = Discussion) =>
      ((In (Role p Reviewer) s.items) =>
          (Permissible p (ReadReviews i) s)))
assume forall (p:prin) (i:int) (s:st).
  ((s.phase = Notification) =>
      ((In (Role p Reviewer) s.items) =>
          (Permissible p (ReadReviews i) s)))
assume forall (p:prin) (i:int) (s:st).
  ((s.phase = Done) =>
      ((In (Role p Reviewer) s.items) =>
          (Permissible p (ReadReviews i) s)))
assume forall (p:prin) (i:int) (s:st).
  ((s.phase = Notification) =>
      ((In (Role p Author) s.items) =>
          ((In (Submitted p i) s.items) =>
              (Permissible p (ReadReviews i) s))))
assume forall (p:prin) (i:int) (s:st).
  ((s.phase = Done) =>
      ((In (Role p Author) s.items) =>
          ((In (Submitted p i) s.items) =>
              (Permissible p (ReadReviews i) s))))
assume forall (p:prin) (i:int) (s:st).
  ((s.phase = Discussion) =>
      ((In (Role p Chair) s.items) =>
          (Permissible p (MakeDecision i) s)))

(*** types for state ***)
private type token :: st => A =
  | Sign : x:st -> token x

type state :: A = (x:st * token x)
type ok_in_state (p:prin) (a:action) :: A  = (x:(s:st { Permissible p a s}) * token x)

(*** dynamic checks ***)
val checkInItems: x:item -> l:items -> b:bool { (b=true => In x l) && (b=false => (not (In x l)))}
let rec checkInItems x = function
  | ANil -> false
  | ACons s tl -> if x=s then true else checkInItems x tl

val checkIn: x:item -> s:st -> b:bool { (b=true => In x s.items) && (b=false => (not (In x s.items)))}
let checkIn x s = checkInItems x s.items

(* TODO forall in refinement here crashes when sending to Z3 *)
(* val checkNoPendingReviews: l:items -> b:bool { b=true => (forall (x:item). ((In x l) => (not (PendingReviewItem x))))} *)
val checkNoPendingReviews: l:items -> b:bool { b=true => NoPendingReviews l}
let rec checkNoPendingReviews l = match l with
  | ANil -> true
  | ACons x tl ->
      (match x with (* TODO: add negated assumption in the else branches of patterns to simplify this *)
         | PendingReview _ _ -> false
         | Role _ _ -> checkNoPendingReviews tl
         | Submitted _ _ -> checkNoPendingReviews tl
         | Bid _ _ -> checkNoPendingReviews tl
         | Conflict _ _ -> checkNoPendingReviews tl
         | Assigned _ _ -> checkNoPendingReviews tl
         | Reviewed _ _ -> checkNoPendingReviews tl)


(*** item list manipulators ***)
val add_item_to_items: x:item -> l:items -> items
let add_item_to_items x l = ACons x l

val add_item: x:item -> s:st -> st
let add_item x s =
  let i' = add_item_to_items x s.items in
  let s' = update_items i' s in
  let _ = writeStateToDB s' in
    s'
    
val remove_item: r:item -> l:items -> l':items { not (In r l')}
let rec remove_item r l = match l with
  | ANil -> ANil
  | ACons x tl ->
      if x = r then remove_item r tl
      else ACons x (remove_item r tl)

val update_items: i:items -> s:st -> s':st { s'.items=i && s'.phase = s.phase}
(* let set_items i s = {phase=s.phase; items=i}  *)

val update_phase : phase -> st -> st
(* let update_phase p s = {phase=p; items=s.items; papers=s.papers; reviews=s.reviews} *)

val update_papers : papers -> st -> st
(* let update_papers p s = {phase=s.phase; items=s.items; papers=p; reviews=s.reviews} *)

val update_reviews : reviews -> st -> st
(* let update_reviews r s = {phase=s.phase; items=s.items; papers=s.papers; reviews=r} *)
  
val remove: r:item -> s:st -> s':st { not(In r s'.items)}
let remove r s =
  let i' = remove_item r s.items in
  let s' = update_items i' s in
  let _ = rewriteStateToDB s' in
    s'


(* interfaces for all actions *)
val advance_phase: p:prin 
                -> ok_in_state p AdvancePhase 
                -> state
let advance_phase p st =
  let (s, tok) = st in
  let a = (s:st) in
  let a' = match a.phase with
    | Init -> update_phase PreSubmission a
    | PreSubmission -> update_phase Submission a
    | Submission -> update_phase Bidding a
    | Bidding -> update_phase Assignment a
    | Assignment -> update_phase Reviewing a
    | Reviewing -> update_phase Discussion a
    | Discussion -> update_phase Notification a
    | Notification -> update_phase Done a
    | _ -> a in
    (a', Sign a')


val add_reviewer: p:prin 
               -> q:prin 
               -> ok_in_state p (AddReviewer q) 
               -> state
let add_reviewer p q st =
  let (a,tok) = st in
  let a' = add_item (Role q Reviewer) a in
    (a', Sign a')

val become_author: p:prin 
                -> ok_in_state p BecomeAuthor 
                -> state
let become_author p st =
  let (a, tok) = st in
  let a' = add_item (Role p Author) a in
    (a', Sign a')

val submit_paper: a:prin 
               -> p:paper 
               -> ok_in_state a SubmitPaper 
               -> state
let submit_paper a p st =
  let (a,tok) = st in
  let _ = writePaperToDB p in
  let a' = update_papers (PCons p a.papers) a in
    (a', Sign a')


val read_paper_list: a:prin 
                  -> ok_in_state a ReadPaperList 
                  -> (int * state)
let read_paper_list p st =
  let (a,tok) = st in
    (0, (a,tok))

val read_paper: a:prin 
             -> i:int 
             -> ok_in_state a (ReadPaper i) 
             -> (int * state)
let read_paper p i st =
  let (a,tok) = st in
    (0, (a,tok))

val bid_paper: p:prin 
            -> i:int 
            -> ok_in_state p (BidPaper i) 
            -> state
let bid_paper p i st =
  let (a,tok) = st in
  let a' = add_item (Bid p i) a in
    (a', Sign a')

val mark_conflict: p:prin 
                -> i:int
                -> ok_in_state p (MarkConflict i) 
                -> state
let mark_conflict p i st =
  let (a,tok) = st in
  let a' = add_item (Conflict p i) a in
    (a', Sign a')

val assign_paper: a:prin 
               -> b:prin 
               -> i:int 
               -> ok_in_state a (AssignPaper b i) 
               -> state
let assign_paper z r i st =
  let (a,tok) = st in
  let a' = add_item (Assigned r i) a in
    (a', Sign a')
      
val review_paper: p:prin 
               -> i:int
               -> r:review 
               -> ok_in_state p (ReviewPaper i) 
               -> state
let review_paper p i r st =
  let (a,tok) = st in
  let _ = writeReviewToDB r in
  let a' = add_item (Reviewed p i) (remove (PendingReview p i) a) in
  let a'' = update_reviews (RCons r a'.reviews) a' in
    (a'', Sign a'')

val read_reviews: p:prin 
               -> i:int 
               -> ok_in_state p (ReadReviews i) 
               -> (int * state)
let read_reviews p i st =
  let (a,tok) = st in
    (0, (a, tok))
      
val make_decision: p:prin 
                -> i:int 
                -> ok_in_state p (MakeDecision i) 
                -> state
let make_decision p i st =
  let (a,tok) = st in
    (a, tok)

val noop : state -> state
let noop st =
  let (a,tok) = st in
    (a, tok)

(* chair and PC for first use *)
val initial_state: int -> state
let initial_state x =
   let a = {phase=Init; items=ANil; papers=PNil; reviews=RNil} in
   let a = add_item (Role (U "Andy") Chair) a in
   let a = add_item (Role (U "Jerry") Reviewer) a in
   let a = add_item (Role (U "George") Reviewer) a in
   let a = add_item (Role (U "Elaine") Reviewer) a in
   let a = add_item (Role (U "Kramer") Reviewer) a in
   (a, Sign a)
     
     
val startup_state: int -> state
let startup_state u =
  match loadDB 0 with
    | Empty -> initial_state 0
    | DB s -> (s, Sign s)

