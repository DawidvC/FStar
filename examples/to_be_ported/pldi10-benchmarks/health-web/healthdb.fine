#light

module HealthDB : PolicyTypes
open Authentication
open ExternDB
open PolicyTypes

(*******************************************************************************)
(* DATA MODEL *)
(*******************************************************************************)
  type subject = 
    | General : subject
    | Psychiatric : subject
    | HIV : subject
    | Other : string -> subject

  type annotation = {annot_author:prin; 
                     annot_date:date; 
                     annot_contents:string}
  type annots = 
    | EmptyAnnot : annots
    | ConsAnnot : annotation -> annots -> annots

  private type recordcontents = 
    | Contents : date -> string -> annots -> recordcontents
              
  type record = {recid:int; 
                 patient:prin;
		 author:prin; 
		 subject:subject; 
                 private_contents:recordcontents}
              
  type records = list record

  (* Signatures of external utility functions *)
  val parse_db_rec : dbrec -> record
  val unparse_rec : record -> dbrec
  val parse_authstate: string -> authstate

(*******************************************************************************)
(* Public API to database *)
(*******************************************************************************)
      
  val search_by_kw: p:prin -> cred p -> kw:string ->
                    s:permit p Search -> StateIs s -> (records * StateIs s)

  let search_by_kw p c kw s tok =
    let dbrecs = (*Externs.*)find_records_by_keyword kw in
    let recs = map parse_db_rec dbrecs in
      recs, tok


  val read_contents: p:prin -> cred p -> r:record -> 
                     s:permit p (Read r.recid) -> StateIs s -> 
                     (date * string * annots * StateIs s)

  let read_contents p c r s tok =
    match r.private_contents with
        Contents d c a -> d, c, a, tok


(*******************************************************************************)
(* Public API for authorization-related functions *)
(*******************************************************************************)

  val activate_role: p:prin -> cred p -> r:role ->
                     s:permit p (Activate r) -> StateIs s ->
                     (t:extendedstate s (ActiveRole p r) * StateIs t)

  let activate_role p c r s tok =
    let s' = ACons (ActiveRole p r) s in
      s', Sign s'

  val consent_to_treatment: pat:prin -> cred pat -> doc:prin ->
                            s:permit pat (ConsentTo doc) -> StateIs s ->
                            (t:extendedstate s (IsTreating doc pat) * StateIs t)

  let consent_to_treatment pat c doc s tok =
    let s' = ACons (IsTreating doc pat) s in
      s', Sign s'
                              
  val annotate_record: p:prin -> cred p -> r:record -> a:annotation ->
                       s:permit p (Annotate r.recid) -> StateIs s -> StateIs s
                       
  let annotate_record p c r a s tok =
    let pc' = match r.private_contents with
      | Contents d c al -> Contents d c (ConsAnnot a al) in
    let r' = {recid=r.recid; patient=r.patient; author=r.author;
              subject=r.subject; private_contents=pc'} in
    let _ = persist_record (unparse_rec r') in
      tok


(*******************************************************************************)
(* Implementation of the API *)
(*******************************************************************************)

  type state :: A = (s:authstate * StateIs s)
  val initial_state : unit -> state
  let initial_state x =
    let authstate = (parse_authstate (read_authstate ())) in
      authstate, Sign authstate
