#light

module PolicyTypes
open Authentication
    
type role =
  | Patient:role
  | Doctor:role
  | Psychiatrist:role
  | Nurse:role
  | Pharmacist:role
  | InsuranceProvider:role
      
type action = 
  | Read:int -> action     
  | Write:int -> action    
  | Annotate:int -> action 
  | Delete:int -> action   
  | Search:action    
  | ConsentTo:prin -> action
  | Activate:role -> action

type permission = 
  | Permit:prin -> action -> permission

type attribute = 
  | CanBeInRole:prin -> role -> attribute
  | ActiveRole:prin -> role -> attribute
  | IsTreating:prin -> prin -> attribute

type authstate =
  | ANil:authstate
  | ACons:attribute -> authstate -> authstate

type In :: attribute => authstate => P
assume forall (a:attribute) (tl:authstate). In a (ACons a tl)
assume forall (a:attribute) (b:attribute) (tl:authstate). In a tl => In a (ACons b tl)
assume forall (a:attribute). (not (In a ANil))
assume forall (a:attribute) (b:attribute) (tl:authstate). ((not (In a tl)) && (not (a=b))) 
  => (not (In a (ACons b tl)))

private type StateIs :: authstate => A = 
  | Sign : s:authstate -> StateIs s

type GrantedIn :: permission => authstate => P
(* Some commonly used type abbreviations *)
type permit (p:prin) (a:action) = s:authstate { GrantedIn (Permit p a) s}
type authcontains (a:attribute) = x:authstate { In a x}

(* prenex and implies rewritten *)
type extendedstate (s:authstate) (a:attribute) = 
    x:authstate { (forall (b:attribute). (In a x) && ((not (In b s)) || (In b x)))}

assume Skolemize_extendedstate:
  forall (s:authstate) (a:attribute) (x:authstate).
    ((not (forall (b:attribute).     ((In a x) && ((not (In b s)) || (In b x)))))
       => (exists (b:attribute). not ((In a x) && ((not (In b s)) || (In b x)))))

(* A utility function to examine the authorization state *)
val checkIn: a:attribute -> s:authstate -> b:bool { (b=true => In a s) && (b=false => (not (In a s)))}
let rec checkIn a = function
  | ANil -> false
  | ACons b tl -> if a=b then true else checkIn a tl
