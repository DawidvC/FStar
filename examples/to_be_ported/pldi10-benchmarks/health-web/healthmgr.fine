#light

module HealthMgr
open Authentication
open ExternNet
open HealthDB
open PolicyTypes
open Policy

val evtloop: state -> state
let rec evtloop st = match next_request () with 
  | p, cred, GetPatientRecords kw ->
      let s, tok = st in
      let test = ((checkIn (ActiveRole p Doctor) s) ||
                  (checkIn (ActiveRole p Nurse) s) ||
                  (checkIn (ActiveRole p InsuranceProvider) s)) in
        if test then
          let records, tok' = search_by_kw p cred kw s tok in
          let _ = respond (RecordList records) in
            evtloop (s, tok')
        else
          let _ = respond (Denied "Sorry, insufficient privilege") in
            evtloop (s, tok)

  | p, cred, GetRecordContents r ->
      let s, tok = st in
      let test = ((p=r.author) ||
                  ((p=r.patient) && checkIn (ActiveRole p Patient) s) ||
                  ((checkIn (IsTreating p r.patient) s) &&
                     (((Psychiatric=r.subject) && checkIn (ActiveRole p Psychiatrist) s) ||
                        ((not (Psychiatric=r.subject)) && (checkIn (ActiveRole p Doctor) s))))) in
        if test then
          let d, con, al, tok' = read_contents p cred r s tok in
          let _ = respond (RecordContents d con al) in
            evtloop (s, tok')
        else
          let _ = respond (Denied "Sorry, insufficient privilege") in
            evtloop (s, tok)
            
  | p, cred, ActivateRole r ->
      let s, tok = st in
      let test = checkIn (CanBeInRole p r) s in
        if test then
          let s', tok' = activate_role p cred r s tok in
          let _ = respond Ok in
            evtloop (s', tok')
        else
          let _ = respond (Denied "Sorry, insufficient privilege") in
            evtloop (s, tok)

  | p, cred, ConsentToTreatment doc ->
      let s, tok = st in
      let test = (checkIn (ActiveRole p Patient) s) && (checkIn (CanBeInRole doc Doctor) s) in
        if test then
          let s', tok' = consent_to_treatment p cred doc s tok in
          let _ = respond Ok in
            evtloop (s', tok')
        else
          let _ = respond (Denied "Sorry, insufficient privilege") in
            evtloop (s, tok)
